openapi: 3.0.3
info:
    title: Laravel
    description: ''
    version: 1.0.0
servers:
    -
        url: 'http://brand_media.test'
paths:
    /api/v1/activitylogs:
        get:
            summary: 'List of activities'
            description: ''
            parameters:
                -
                    in: query
                    name: page
                    description: 'Номер страницы с результатами выдачи'
                    example: non
                    required: false
                    schema:
                        type: string
                        description: 'Номер страницы с результатами выдачи'
                        example: non
                -
                    in: query
                    name: sort
                    description: 'Поле для сортировки. По-умолчанию ''id\|desc'''
                    example: voluptatem
                    required: false
                    schema:
                        type: string
                        description: 'Поле для сортировки. По-умолчанию ''id\|desc'''
                        example: voluptatem
                -
                    in: query
                    name: search
                    description: 'Строка, которая должна содержаться в результатах выдачи'
                    example: aut
                    required: false
                    schema:
                        type: string
                        description: 'Строка, которая должна содержаться в результатах выдачи'
                        example: aut
                -
                    in: query
                    name: subject_id
                    description: 'ID записи'
                    example: iure
                    required: false
                    schema:
                        type: string
                        description: 'ID записи'
                        example: iure
                -
                    in: query
                    name: subject_type
                    description: 'Название раздела'
                    example: magnam
                    required: false
                    schema:
                        type: string
                        description: 'Название раздела'
                        example: magnam
                -
                    in: query
                    name: description
                    description: 'Тип действия'
                    example: non
                    required: false
                    schema:
                        type: string
                        description: 'Тип действия'
                        example: non
                -
                    in: query
                    name: causer_id
                    description: 'Кто делал'
                    example: et
                    required: false
                    schema:
                        type: string
                        description: 'Кто делал'
                        example: et
                -
                    in: query
                    name: from
                    description: 'Дата начала интервала результатов выдачи (в формате ''DD-MM-YYYY HH:mm:ss'')'
                    example: omnis
                    required: false
                    schema:
                        type: string
                        description: 'Дата начала интервала результатов выдачи (в формате ''DD-MM-YYYY HH:mm:ss'')'
                        example: omnis
                -
                    in: query
                    name: till
                    description: 'Дата окончания интервала результатов выдачи (в формате ''DD-MM-YYYY HH:mm:ss'')'
                    example: impedit
                    required: false
                    schema:
                        type: string
                        description: 'Дата окончания интервала результатов выдачи (в формате ''DD-MM-YYYY HH:mm:ss'')'
                        example: impedit
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                401:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: Unauthenticated.
                                properties:
                                    message: { type: string, example: Unauthenticated. }
            tags:
                - 'Activity Log'
            security: []
    '/api/v1/activitylog/{id}':
        get:
            summary: 'Get specified activity'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                401:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: Unauthenticated.
                                properties:
                                    message: { type: string, example: Unauthenticated. }
            tags:
                - 'Activity Log'
            security: []
        parameters:
            -
                in: path
                name: id
                description: ''
                example: odio
                required: true
                schema:
                    type: string
    /api/v1/authors:
        get:
            summary: 'List of Authors'
            description: ''
            parameters:
                -
                    in: query
                    name: page
                    description: 'Номер страницы с результатами выдачи'
                    example: 14
                    required: false
                    schema:
                        type: integer
                        description: 'Номер страницы с результатами выдачи'
                        example: 14
                -
                    in: query
                    name: sort
                    description: 'Поле для сортировки. По-умолчанию  ''id|desc'''
                    example: alias
                    required: false
                    schema:
                        type: string
                        description: 'Поле для сортировки. По-умолчанию  ''id|desc'''
                        example: alias
                -
                    in: query
                    name: search
                    description: 'Строка, которая должна содержаться в результатах выдачи'
                    example: quae
                    required: false
                    schema:
                        type: string
                        description: 'Строка, которая должна содержаться в результатах выдачи'
                        example: quae
                -
                    in: query
                    name: status
                    description: 'Статус отображения (возможные значения visible, hidden)'
                    example: sunt
                    required: false
                    schema:
                        type: string
                        description: 'Статус отображения (возможные значения visible, hidden)'
                        example: sunt
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                401:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: Unauthenticated.
                                properties:
                                    message: { type: string, example: Unauthenticated. }
            tags:
                - Authors
            security: []
    '/api/v1/author/{id}':
        get:
            summary: 'Get specified Authors'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                401:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: Unauthenticated.
                                properties:
                                    message: { type: string, example: Unauthenticated. }
            tags:
                - Authors
            security: []
        put:
            summary: 'Update Authors'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Authors
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                firstname:
                                    type: string
                                    description: Имя
                                    example: eius
                                lastname:
                                    type: string
                                    description: Фамилия
                                    example: vel
                                meta_title:
                                    type: string
                                    description: 'Тег title'
                                    example: est
                                meta_description:
                                    type: string
                                    description: 'Тег description'
                                    example: provident
                                image:
                                    type: optional
                                    description: Картинка
                                    example: aperiam
                                image_delete:
                                    type: optional
                                    description: 'Удаление картинки (1-удалить)'
                                    example: ab
                                status:
                                    type: integer
                                    description: 'Статус отображения (1-отображается, 0-скрыто)'
                                    example: 3
                            required:
                                - firstname
                                - lastname
        delete:
            summary: 'Delete specified Authors'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Authors
        parameters:
            -
                in: path
                name: id
                description: ''
                example: voluptatem
                required: true
                schema:
                    type: string
    /api/v1/author:
        post:
            summary: 'Create Authors'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Authors
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                firstname:
                                    type: string
                                    description: Имя
                                    example: impedit
                                lastname:
                                    type: string
                                    description: Фамилия
                                    example: aut
                                meta_title:
                                    type: string
                                    description: 'Тег title'
                                    example: suscipit
                                meta_description:
                                    type: string
                                    description: 'Тег description'
                                    example: amet
                                image:
                                    type: optional
                                    description: Картинка
                                    example: dolor
                                image_delete:
                                    type: optional
                                    description: 'Удаление картинки (1-удалить)'
                                    example: omnis
                                status:
                                    type: integer
                                    description: 'Статус отображения (1-отображается, 0-скрыто)'
                                    example: 2
                            required:
                                - firstname
                                - lastname
                                - meta_title
                                - meta_description
    /api/v1/app/authors:
        get:
            summary: 'List of Authors'
            description: ''
            parameters:
                -
                    in: query
                    name: page
                    description: 'Номер страницы с результатами выдачи'
                    example: 18
                    required: false
                    schema:
                        type: integer
                        description: 'Номер страницы с результатами выдачи'
                        example: 18
                -
                    in: query
                    name: sort
                    description: 'Поле для сортировки. По-умолчанию  ''id|desc'''
                    example: voluptas
                    required: false
                    schema:
                        type: string
                        description: 'Поле для сортировки. По-умолчанию  ''id|desc'''
                        example: voluptas
                -
                    in: query
                    name: search
                    description: 'Строка, которая должна содержаться в результатах выдачи'
                    example: ad
                    required: false
                    schema:
                        type: string
                        description: 'Строка, которая должна содержаться в результатах выдачи'
                        example: ad
                -
                    in: query
                    name: status
                    description: 'Статус отображения (возможные значения visible, hidden)'
                    example: in
                    required: false
                    schema:
                        type: string
                        description: 'Статус отображения (возможные значения visible, hidden)'
                        example: in
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                500:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'SQLSTATE[42S22]: Column not found: 1054 Unknown column ''name'' in ''where clause'' (SQL: select count(*) as aggregate from `authors` where `name` LIKE %ad% and `authors`.`deleted_at` is null)'
                                    exception: Illuminate\Database\QueryException
                                    file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Database/Connection.php
                                    line: 703
                                    trace: [{ file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Database/Connection.php, line: 663, function: runQueryCallback, class: Illuminate\Database\Connection, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Database/Connection.php, line: 367, function: run, class: Illuminate\Database\Connection, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Database/Query/Builder.php, line: 2351, function: select, class: Illuminate\Database\Connection, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Database/Query/Builder.php, line: 2339, function: runSelect, class: Illuminate\Database\Query\Builder, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Database/Query/Builder.php, line: 2873, function: 'Illuminate\Database\Query\{closure}', class: Illuminate\Database\Query\Builder, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Database/Query/Builder.php, line: 2340, function: onceWithColumns, class: Illuminate\Database\Query\Builder, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Database/Query/Builder.php, line: 2487, function: get, class: Illuminate\Database\Query\Builder, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Database/Query/Builder.php, line: 2446, function: runPaginationCountQuery, class: Illuminate\Database\Query\Builder, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Database/Eloquent/Builder.php, line: 798, function: getCountForPagination, class: Illuminate\Database\Query\Builder, type: '->' }, { file: /Users/katherine/www/brand_media/app/Models/Author.php, line: 107, function: paginate, class: Illuminate\Database\Eloquent\Builder, type: '->' }, { file: /Users/katherine/www/brand_media/app/Http/Controllers/AuthorController.php, line: 35, function: getAll, class: App\Models\Author, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Routing/Controller.php, line: 54, function: index, class: App\Http\Controllers\AuthorController, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Routing/ControllerDispatcher.php, line: 45, function: callAction, class: Illuminate\Routing\Controller, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Routing/Route.php, line: 262, function: dispatch, class: Illuminate\Routing\ControllerDispatcher, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Routing/Route.php, line: 205, function: runController, class: Illuminate\Routing\Route, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Routing/Router.php, line: 695, function: run, class: Illuminate\Routing\Route, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php, line: 128, function: 'Illuminate\Routing\{closure}', class: Illuminate\Routing\Router, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Routing/Middleware/SubstituteBindings.php, line: 50, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php, line: 167, function: handle, class: Illuminate\Routing\Middleware\SubstituteBindings, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php, line: 103, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Routing/Router.php, line: 697, function: then, class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Routing/Router.php, line: 672, function: runRouteWithinStack, class: Illuminate\Routing\Router, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Routing/Router.php, line: 636, function: runRoute, class: Illuminate\Routing\Router, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Routing/Router.php, line: 625, function: dispatchToRoute, class: Illuminate\Routing\Router, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Foundation/Http/Kernel.php, line: 167, function: dispatch, class: Illuminate\Routing\Router, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php, line: 128, function: 'Illuminate\Foundation\Http\{closure}', class: Illuminate\Foundation\Http\Kernel, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Foundation/Http/Middleware/TransformsRequest.php, line: 21, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Foundation/Http/Middleware/ConvertEmptyStringsToNull.php, line: 31, function: handle, class: Illuminate\Foundation\Http\Middleware\TransformsRequest, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php, line: 167, function: handle, class: Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Foundation/Http/Middleware/TransformsRequest.php, line: 21, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Foundation/Http/Middleware/TrimStrings.php, line: 40, function: handle, class: Illuminate\Foundation\Http\Middleware\TransformsRequest, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php, line: 167, function: handle, class: Illuminate\Foundation\Http\Middleware\TrimStrings, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Foundation/Http/Middleware/ValidatePostSize.php, line: 27, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php, line: 167, function: handle, class: Illuminate\Foundation\Http\Middleware\ValidatePostSize, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Foundation/Http/Middleware/PreventRequestsDuringMaintenance.php, line: 86, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php, line: 167, function: handle, class: Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/fruitcake/laravel-cors/src/HandleCors.php, line: 52, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php, line: 167, function: handle, class: Fruitcake\Cors\HandleCors, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Http/Middleware/TrustProxies.php, line: 39, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php, line: 167, function: handle, class: Illuminate\Http\Middleware\TrustProxies, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php, line: 103, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Foundation/Http/Kernel.php, line: 142, function: then, class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Foundation/Http/Kernel.php, line: 111, function: sendRequestThroughRouter, class: Illuminate\Foundation\Http\Kernel, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/knuckleswtf/scribe/src/Extracting/Strategies/Responses/ResponseCalls.php, line: 324, function: handle, class: Illuminate\Foundation\Http\Kernel, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/knuckleswtf/scribe/src/Extracting/Strategies/Responses/ResponseCalls.php, line: 305, function: callLaravelOrLumenRoute, class: Knuckles\Scribe\Extracting\Strategies\Responses\ResponseCalls, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/knuckleswtf/scribe/src/Extracting/Strategies/Responses/ResponseCalls.php, line: 76, function: makeApiCall, class: Knuckles\Scribe\Extracting\Strategies\Responses\ResponseCalls, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/knuckleswtf/scribe/src/Extracting/Strategies/Responses/ResponseCalls.php, line: 51, function: makeResponseCall, class: Knuckles\Scribe\Extracting\Strategies\Responses\ResponseCalls, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/knuckleswtf/scribe/src/Extracting/Strategies/Responses/ResponseCalls.php, line: 41, function: makeResponseCallIfEnabledAndNoSuccessResponses, class: Knuckles\Scribe\Extracting\Strategies\Responses\ResponseCalls, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/knuckleswtf/scribe/src/Extracting/Generator.php, line: 236, function: __invoke, class: Knuckles\Scribe\Extracting\Strategies\Responses\ResponseCalls, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/knuckleswtf/scribe/src/Extracting/Generator.php, line: 172, function: iterateThroughStrategies, class: Knuckles\Scribe\Extracting\Generator, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/knuckleswtf/scribe/src/Extracting/Generator.php, line: 127, function: fetchResponses, class: Knuckles\Scribe\Extracting\Generator, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/knuckleswtf/scribe/src/Commands/GenerateDocumentation.php, line: 119, function: processRoute, class: Knuckles\Scribe\Extracting\Generator, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/knuckleswtf/scribe/src/Commands/GenerateDocumentation.php, line: 73, function: processRoutes, class: Knuckles\Scribe\Commands\GenerateDocumentation, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Container/BoundMethod.php, line: 36, function: handle, class: Knuckles\Scribe\Commands\GenerateDocumentation, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Container/Util.php, line: 40, function: 'Illuminate\Container\{closure}', class: Illuminate\Container\BoundMethod, type: '::' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Container/BoundMethod.php, line: 93, function: unwrapIfClosure, class: Illuminate\Container\Util, type: '::' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Container/BoundMethod.php, line: 37, function: callBoundMethod, class: Illuminate\Container\BoundMethod, type: '::' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Container/Container.php, line: 653, function: call, class: Illuminate\Container\BoundMethod, type: '::' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Console/Command.php, line: 136, function: call, class: Illuminate\Container\Container, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/symfony/console/Command/Command.php, line: 299, function: execute, class: Illuminate\Console\Command, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Console/Command.php, line: 121, function: run, class: Symfony\Component\Console\Command\Command, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/symfony/console/Application.php, line: 978, function: run, class: Illuminate\Console\Command, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/symfony/console/Application.php, line: 295, function: doRunCommand, class: Symfony\Component\Console\Application, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/symfony/console/Application.php, line: 167, function: doRun, class: Symfony\Component\Console\Application, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Console/Application.php, line: 94, function: run, class: Symfony\Component\Console\Application, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Foundation/Console/Kernel.php, line: 129, function: run, class: Illuminate\Console\Application, type: '->' }, { file: /Users/katherine/www/brand_media/artisan, line: 37, function: handle, class: Illuminate\Foundation\Console\Kernel, type: '->' }]
                                properties:
                                    message: { type: string, example: 'SQLSTATE[42S22]: Column not found: 1054 Unknown column ''name'' in ''where clause'' (SQL: select count(*) as aggregate from `authors` where `name` LIKE %ad% and `authors`.`deleted_at` is null)' }
                                    exception: { type: string, example: Illuminate\Database\QueryException }
                                    file: { type: string, example: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Database/Connection.php }
                                    line: { type: integer, example: 703 }
                                    trace: { type: array, example: [{ file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Database/Connection.php, line: 663, function: runQueryCallback, class: Illuminate\Database\Connection, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Database/Connection.php, line: 367, function: run, class: Illuminate\Database\Connection, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Database/Query/Builder.php, line: 2351, function: select, class: Illuminate\Database\Connection, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Database/Query/Builder.php, line: 2339, function: runSelect, class: Illuminate\Database\Query\Builder, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Database/Query/Builder.php, line: 2873, function: 'Illuminate\Database\Query\{closure}', class: Illuminate\Database\Query\Builder, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Database/Query/Builder.php, line: 2340, function: onceWithColumns, class: Illuminate\Database\Query\Builder, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Database/Query/Builder.php, line: 2487, function: get, class: Illuminate\Database\Query\Builder, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Database/Query/Builder.php, line: 2446, function: runPaginationCountQuery, class: Illuminate\Database\Query\Builder, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Database/Eloquent/Builder.php, line: 798, function: getCountForPagination, class: Illuminate\Database\Query\Builder, type: '->' }, { file: /Users/katherine/www/brand_media/app/Models/Author.php, line: 107, function: paginate, class: Illuminate\Database\Eloquent\Builder, type: '->' }, { file: /Users/katherine/www/brand_media/app/Http/Controllers/AuthorController.php, line: 35, function: getAll, class: App\Models\Author, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Routing/Controller.php, line: 54, function: index, class: App\Http\Controllers\AuthorController, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Routing/ControllerDispatcher.php, line: 45, function: callAction, class: Illuminate\Routing\Controller, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Routing/Route.php, line: 262, function: dispatch, class: Illuminate\Routing\ControllerDispatcher, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Routing/Route.php, line: 205, function: runController, class: Illuminate\Routing\Route, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Routing/Router.php, line: 695, function: run, class: Illuminate\Routing\Route, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php, line: 128, function: 'Illuminate\Routing\{closure}', class: Illuminate\Routing\Router, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Routing/Middleware/SubstituteBindings.php, line: 50, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php, line: 167, function: handle, class: Illuminate\Routing\Middleware\SubstituteBindings, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php, line: 103, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Routing/Router.php, line: 697, function: then, class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Routing/Router.php, line: 672, function: runRouteWithinStack, class: Illuminate\Routing\Router, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Routing/Router.php, line: 636, function: runRoute, class: Illuminate\Routing\Router, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Routing/Router.php, line: 625, function: dispatchToRoute, class: Illuminate\Routing\Router, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Foundation/Http/Kernel.php, line: 167, function: dispatch, class: Illuminate\Routing\Router, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php, line: 128, function: 'Illuminate\Foundation\Http\{closure}', class: Illuminate\Foundation\Http\Kernel, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Foundation/Http/Middleware/TransformsRequest.php, line: 21, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Foundation/Http/Middleware/ConvertEmptyStringsToNull.php, line: 31, function: handle, class: Illuminate\Foundation\Http\Middleware\TransformsRequest, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php, line: 167, function: handle, class: Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Foundation/Http/Middleware/TransformsRequest.php, line: 21, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Foundation/Http/Middleware/TrimStrings.php, line: 40, function: handle, class: Illuminate\Foundation\Http\Middleware\TransformsRequest, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php, line: 167, function: handle, class: Illuminate\Foundation\Http\Middleware\TrimStrings, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Foundation/Http/Middleware/ValidatePostSize.php, line: 27, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php, line: 167, function: handle, class: Illuminate\Foundation\Http\Middleware\ValidatePostSize, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Foundation/Http/Middleware/PreventRequestsDuringMaintenance.php, line: 86, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php, line: 167, function: handle, class: Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/fruitcake/laravel-cors/src/HandleCors.php, line: 52, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php, line: 167, function: handle, class: Fruitcake\Cors\HandleCors, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Http/Middleware/TrustProxies.php, line: 39, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php, line: 167, function: handle, class: Illuminate\Http\Middleware\TrustProxies, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php, line: 103, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Foundation/Http/Kernel.php, line: 142, function: then, class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Foundation/Http/Kernel.php, line: 111, function: sendRequestThroughRouter, class: Illuminate\Foundation\Http\Kernel, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/knuckleswtf/scribe/src/Extracting/Strategies/Responses/ResponseCalls.php, line: 324, function: handle, class: Illuminate\Foundation\Http\Kernel, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/knuckleswtf/scribe/src/Extracting/Strategies/Responses/ResponseCalls.php, line: 305, function: callLaravelOrLumenRoute, class: Knuckles\Scribe\Extracting\Strategies\Responses\ResponseCalls, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/knuckleswtf/scribe/src/Extracting/Strategies/Responses/ResponseCalls.php, line: 76, function: makeApiCall, class: Knuckles\Scribe\Extracting\Strategies\Responses\ResponseCalls, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/knuckleswtf/scribe/src/Extracting/Strategies/Responses/ResponseCalls.php, line: 51, function: makeResponseCall, class: Knuckles\Scribe\Extracting\Strategies\Responses\ResponseCalls, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/knuckleswtf/scribe/src/Extracting/Strategies/Responses/ResponseCalls.php, line: 41, function: makeResponseCallIfEnabledAndNoSuccessResponses, class: Knuckles\Scribe\Extracting\Strategies\Responses\ResponseCalls, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/knuckleswtf/scribe/src/Extracting/Generator.php, line: 236, function: __invoke, class: Knuckles\Scribe\Extracting\Strategies\Responses\ResponseCalls, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/knuckleswtf/scribe/src/Extracting/Generator.php, line: 172, function: iterateThroughStrategies, class: Knuckles\Scribe\Extracting\Generator, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/knuckleswtf/scribe/src/Extracting/Generator.php, line: 127, function: fetchResponses, class: Knuckles\Scribe\Extracting\Generator, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/knuckleswtf/scribe/src/Commands/GenerateDocumentation.php, line: 119, function: processRoute, class: Knuckles\Scribe\Extracting\Generator, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/knuckleswtf/scribe/src/Commands/GenerateDocumentation.php, line: 73, function: processRoutes, class: Knuckles\Scribe\Commands\GenerateDocumentation, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Container/BoundMethod.php, line: 36, function: handle, class: Knuckles\Scribe\Commands\GenerateDocumentation, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Container/Util.php, line: 40, function: 'Illuminate\Container\{closure}', class: Illuminate\Container\BoundMethod, type: '::' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Container/BoundMethod.php, line: 93, function: unwrapIfClosure, class: Illuminate\Container\Util, type: '::' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Container/BoundMethod.php, line: 37, function: callBoundMethod, class: Illuminate\Container\BoundMethod, type: '::' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Container/Container.php, line: 653, function: call, class: Illuminate\Container\BoundMethod, type: '::' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Console/Command.php, line: 136, function: call, class: Illuminate\Container\Container, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/symfony/console/Command/Command.php, line: 299, function: execute, class: Illuminate\Console\Command, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Console/Command.php, line: 121, function: run, class: Symfony\Component\Console\Command\Command, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/symfony/console/Application.php, line: 978, function: run, class: Illuminate\Console\Command, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/symfony/console/Application.php, line: 295, function: doRunCommand, class: Symfony\Component\Console\Application, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/symfony/console/Application.php, line: 167, function: doRun, class: Symfony\Component\Console\Application, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Console/Application.php, line: 94, function: run, class: Symfony\Component\Console\Application, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Foundation/Console/Kernel.php, line: 129, function: run, class: Illuminate\Console\Application, type: '->' }, { file: /Users/katherine/www/brand_media/artisan, line: 37, function: handle, class: Illuminate\Foundation\Console\Kernel, type: '->' }], items: { type: object } }
            tags:
                - Authors
            security: []
    '/api/v1/app/author/{id}':
        get:
            summary: 'Get specified Authors'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                404:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    status: error
                                    message: 'Ресурс не знайден.'
                                properties:
                                    status: { type: string, example: error }
                                    message: { type: string, example: 'Ресурс не знайден.' }
            tags:
                - Authors
            security: []
        parameters:
            -
                in: path
                name: id
                description: ''
                example: est
                required: true
                schema:
                    type: string
    /api/v1/categories:
        get:
            summary: 'List of Categories'
            description: ''
            parameters:
                -
                    in: query
                    name: page
                    description: 'Номер страницы с результатами выдачи'
                    example: 8
                    required: false
                    schema:
                        type: integer
                        description: 'Номер страницы с результатами выдачи'
                        example: 8
                -
                    in: query
                    name: sort
                    description: 'Поле для сортировки. По-умолчанию  ''id|desc'''
                    example: facilis
                    required: false
                    schema:
                        type: string
                        description: 'Поле для сортировки. По-умолчанию  ''id|desc'''
                        example: facilis
                -
                    in: query
                    name: search
                    description: 'Строка, которая должна содержаться в результатах выдачи'
                    example: quia
                    required: false
                    schema:
                        type: string
                        description: 'Строка, которая должна содержаться в результатах выдачи'
                        example: quia
                -
                    in: query
                    name: status
                    description: 'Статус отображения (возможные значения visible, hidden)'
                    example: praesentium
                    required: false
                    schema:
                        type: string
                        description: 'Статус отображения (возможные значения visible, hidden)'
                        example: praesentium
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                401:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: Unauthenticated.
                                properties:
                                    message: { type: string, example: Unauthenticated. }
            tags:
                - Categories
            security: []
    '/api/v1/category/{id}':
        get:
            summary: 'Get specified Categories'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                401:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: Unauthenticated.
                                properties:
                                    message: { type: string, example: Unauthenticated. }
            tags:
                - Categories
            security: []
        put:
            summary: 'Update Categories'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Categories
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    description: 'Название категории'
                                    example: autem
                                status:
                                    type: integer
                                    description: 'Статус отображения (1-отображается, 0-скрыто)'
                                    example: 7
                                meta_title:
                                    type: string
                                    description: 'Тег title'
                                    example: cumque
                                meta_description:
                                    type: string
                                    description: 'Тег description'
                                    example: ab
                            required:
                                - name
                                - meta_title
                                - meta_description
        delete:
            summary: 'Delete specified Categories'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Categories
        parameters:
            -
                in: path
                name: id
                description: ''
                example: omnis
                required: true
                schema:
                    type: string
    /api/v1/category:
        post:
            summary: 'Create Categories'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Categories
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    description: 'Название категории'
                                    example: nulla
                                status:
                                    type: integer
                                    description: 'Статус отображения (1-отображается, 0-скрыто)'
                                    example: 8
                                meta_title:
                                    type: string
                                    description: 'Тег title'
                                    example: consequatur
                                meta_description:
                                    type: string
                                    description: 'Тег description'
                                    example: quia
                            required:
                                - name
                                - meta_title
                                - meta_description
    /api/v1/app/categories:
        get:
            summary: 'List of Categories'
            description: ''
            parameters:
                -
                    in: query
                    name: page
                    description: 'Номер страницы с результатами выдачи'
                    example: 11
                    required: false
                    schema:
                        type: integer
                        description: 'Номер страницы с результатами выдачи'
                        example: 11
                -
                    in: query
                    name: sort
                    description: 'Поле для сортировки. По-умолчанию  ''id|desc'''
                    example: quo
                    required: false
                    schema:
                        type: string
                        description: 'Поле для сортировки. По-умолчанию  ''id|desc'''
                        example: quo
                -
                    in: query
                    name: search
                    description: 'Строка, которая должна содержаться в результатах выдачи'
                    example: accusamus
                    required: false
                    schema:
                        type: string
                        description: 'Строка, которая должна содержаться в результатах выдачи'
                        example: accusamus
                -
                    in: query
                    name: status
                    description: 'Статус отображения (возможные значения visible, hidden)'
                    example: pariatur
                    required: false
                    schema:
                        type: string
                        description: 'Статус отображения (возможные значения visible, hidden)'
                        example: pariatur
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    current_page: 11
                                    data: []
                                    first_page_url: 'http://localhost/api/v1/app/categories?page=1'
                                    from: null
                                    last_page: 1
                                    last_page_url: 'http://localhost/api/v1/app/categories?page=1'
                                    links: [{ url: 'http://localhost/api/v1/app/categories?page=10', label: '&laquo; Назад', active: false }, { url: 'http://localhost/api/v1/app/categories?page=1', label: '1', active: false }, { url: null, label: 'Вперёд &raquo;', active: false }]
                                    next_page_url: null
                                    path: 'http://localhost/api/v1/app/categories'
                                    per_page: 4
                                    prev_page_url: 'http://localhost/api/v1/app/categories?page=10'
                                    to: null
                                    total: 0
                                properties:
                                    current_page: { type: integer, example: 11 }
                                    data: { type: array, example: [] }
                                    first_page_url: { type: string, example: 'http://localhost/api/v1/app/categories?page=1' }
                                    from: { type: string, example: null }
                                    last_page: { type: integer, example: 1 }
                                    last_page_url: { type: string, example: 'http://localhost/api/v1/app/categories?page=1' }
                                    links: { type: array, example: [{ url: 'http://localhost/api/v1/app/categories?page=10', label: '&laquo; Назад', active: false }, { url: 'http://localhost/api/v1/app/categories?page=1', label: '1', active: false }, { url: null, label: 'Вперёд &raquo;', active: false }], items: { type: object } }
                                    next_page_url: { type: string, example: null }
                                    path: { type: string, example: 'http://localhost/api/v1/app/categories' }
                                    per_page: { type: integer, example: 4 }
                                    prev_page_url: { type: string, example: 'http://localhost/api/v1/app/categories?page=10' }
                                    to: { type: string, example: null }
                                    total: { type: integer, example: 0 }
            tags:
                - Categories
            security: []
    '/api/v1/app/category/{id}':
        get:
            summary: 'Get specified Categories'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                404:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    status: error
                                    message: 'Ресурс не знайден.'
                                properties:
                                    status: { type: string, example: error }
                                    message: { type: string, example: 'Ресурс не знайден.' }
            tags:
                - Categories
            security: []
        parameters:
            -
                in: path
                name: id
                description: ''
                example: sapiente
                required: true
                schema:
                    type: string
    /sanctum/csrf-cookie:
        get:
            summary: 'Return an empty response simply to trigger the storage of the CSRF cookie in the browser.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Endpoints
            security: []
    /api/user:
        get:
            summary: ''
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                401:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: Unauthenticated.
                                properties:
                                    message: { type: string, example: Unauthenticated. }
            tags:
                - Endpoints
            security: []
    /feed:
        get:
            summary: ''
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                500:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Trying to get property ''name'' of non-object'
                                    exception: ErrorException
                                    file: /Users/katherine/www/brand_media/app/Models/News.php
                                    line: 549
                                    trace: [{ file: /Users/katherine/www/brand_media/app/Models/News.php, line: 549, function: handleError, class: Illuminate\Foundation\Bootstrap\HandleExceptions, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/spatie/laravel-feed/src/Feed.php, line: 78, function: toFeedItem, class: App\Models\News, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/spatie/laravel-feed/src/Feed.php, line: 38, function: castToFeedItem, class: Spatie\Feed\Feed, type: '->' }, { function: 'Spatie\Feed\{closure}', class: Spatie\Feed\Feed, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Collections/Collection.php, line: 664, function: array_map }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Database/Eloquent/Collection.php, line: 348, function: map, class: Illuminate\Support\Collection, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/spatie/laravel-feed/src/Feed.php, line: 38, function: map, class: Illuminate\Database\Eloquent\Collection, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/spatie/laravel-feed/src/Http/FeedController.php, line: 31, function: __construct, class: Spatie\Feed\Feed, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Routing/ControllerDispatcher.php, line: 48, function: __invoke, class: Spatie\Feed\Http\FeedController, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Routing/Route.php, line: 262, function: dispatch, class: Illuminate\Routing\ControllerDispatcher, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Routing/Route.php, line: 205, function: runController, class: Illuminate\Routing\Route, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Routing/Router.php, line: 695, function: run, class: Illuminate\Routing\Route, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php, line: 128, function: 'Illuminate\Routing\{closure}', class: Illuminate\Routing\Router, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Routing/Middleware/SubstituteBindings.php, line: 50, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php, line: 167, function: handle, class: Illuminate\Routing\Middleware\SubstituteBindings, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Foundation/Http/Middleware/VerifyCsrfToken.php, line: 78, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php, line: 167, function: handle, class: Illuminate\Foundation\Http\Middleware\VerifyCsrfToken, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/View/Middleware/ShareErrorsFromSession.php, line: 49, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php, line: 167, function: handle, class: Illuminate\View\Middleware\ShareErrorsFromSession, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Session/Middleware/StartSession.php, line: 121, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Session/Middleware/StartSession.php, line: 64, function: handleStatefulRequest, class: Illuminate\Session\Middleware\StartSession, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php, line: 167, function: handle, class: Illuminate\Session\Middleware\StartSession, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Cookie/Middleware/AddQueuedCookiesToResponse.php, line: 37, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php, line: 167, function: handle, class: Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Cookie/Middleware/EncryptCookies.php, line: 67, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php, line: 167, function: handle, class: Illuminate\Cookie\Middleware\EncryptCookies, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php, line: 103, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Routing/Router.php, line: 697, function: then, class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Routing/Router.php, line: 672, function: runRouteWithinStack, class: Illuminate\Routing\Router, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Routing/Router.php, line: 636, function: runRoute, class: Illuminate\Routing\Router, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Routing/Router.php, line: 625, function: dispatchToRoute, class: Illuminate\Routing\Router, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Foundation/Http/Kernel.php, line: 167, function: dispatch, class: Illuminate\Routing\Router, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php, line: 128, function: 'Illuminate\Foundation\Http\{closure}', class: Illuminate\Foundation\Http\Kernel, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Foundation/Http/Middleware/TransformsRequest.php, line: 21, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Foundation/Http/Middleware/ConvertEmptyStringsToNull.php, line: 31, function: handle, class: Illuminate\Foundation\Http\Middleware\TransformsRequest, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php, line: 167, function: handle, class: Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Foundation/Http/Middleware/TransformsRequest.php, line: 21, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Foundation/Http/Middleware/TrimStrings.php, line: 40, function: handle, class: Illuminate\Foundation\Http\Middleware\TransformsRequest, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php, line: 167, function: handle, class: Illuminate\Foundation\Http\Middleware\TrimStrings, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Foundation/Http/Middleware/ValidatePostSize.php, line: 27, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php, line: 167, function: handle, class: Illuminate\Foundation\Http\Middleware\ValidatePostSize, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Foundation/Http/Middleware/PreventRequestsDuringMaintenance.php, line: 86, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php, line: 167, function: handle, class: Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/fruitcake/laravel-cors/src/HandleCors.php, line: 38, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php, line: 167, function: handle, class: Fruitcake\Cors\HandleCors, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Http/Middleware/TrustProxies.php, line: 39, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php, line: 167, function: handle, class: Illuminate\Http\Middleware\TrustProxies, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php, line: 103, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Foundation/Http/Kernel.php, line: 142, function: then, class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Foundation/Http/Kernel.php, line: 111, function: sendRequestThroughRouter, class: Illuminate\Foundation\Http\Kernel, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/knuckleswtf/scribe/src/Extracting/Strategies/Responses/ResponseCalls.php, line: 324, function: handle, class: Illuminate\Foundation\Http\Kernel, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/knuckleswtf/scribe/src/Extracting/Strategies/Responses/ResponseCalls.php, line: 305, function: callLaravelOrLumenRoute, class: Knuckles\Scribe\Extracting\Strategies\Responses\ResponseCalls, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/knuckleswtf/scribe/src/Extracting/Strategies/Responses/ResponseCalls.php, line: 76, function: makeApiCall, class: Knuckles\Scribe\Extracting\Strategies\Responses\ResponseCalls, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/knuckleswtf/scribe/src/Extracting/Strategies/Responses/ResponseCalls.php, line: 51, function: makeResponseCall, class: Knuckles\Scribe\Extracting\Strategies\Responses\ResponseCalls, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/knuckleswtf/scribe/src/Extracting/Strategies/Responses/ResponseCalls.php, line: 41, function: makeResponseCallIfEnabledAndNoSuccessResponses, class: Knuckles\Scribe\Extracting\Strategies\Responses\ResponseCalls, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/knuckleswtf/scribe/src/Extracting/Generator.php, line: 236, function: __invoke, class: Knuckles\Scribe\Extracting\Strategies\Responses\ResponseCalls, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/knuckleswtf/scribe/src/Extracting/Generator.php, line: 172, function: iterateThroughStrategies, class: Knuckles\Scribe\Extracting\Generator, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/knuckleswtf/scribe/src/Extracting/Generator.php, line: 127, function: fetchResponses, class: Knuckles\Scribe\Extracting\Generator, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/knuckleswtf/scribe/src/Commands/GenerateDocumentation.php, line: 119, function: processRoute, class: Knuckles\Scribe\Extracting\Generator, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/knuckleswtf/scribe/src/Commands/GenerateDocumentation.php, line: 73, function: processRoutes, class: Knuckles\Scribe\Commands\GenerateDocumentation, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Container/BoundMethod.php, line: 36, function: handle, class: Knuckles\Scribe\Commands\GenerateDocumentation, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Container/Util.php, line: 40, function: 'Illuminate\Container\{closure}', class: Illuminate\Container\BoundMethod, type: '::' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Container/BoundMethod.php, line: 93, function: unwrapIfClosure, class: Illuminate\Container\Util, type: '::' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Container/BoundMethod.php, line: 37, function: callBoundMethod, class: Illuminate\Container\BoundMethod, type: '::' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Container/Container.php, line: 653, function: call, class: Illuminate\Container\BoundMethod, type: '::' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Console/Command.php, line: 136, function: call, class: Illuminate\Container\Container, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/symfony/console/Command/Command.php, line: 299, function: execute, class: Illuminate\Console\Command, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Console/Command.php, line: 121, function: run, class: Symfony\Component\Console\Command\Command, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/symfony/console/Application.php, line: 978, function: run, class: Illuminate\Console\Command, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/symfony/console/Application.php, line: 295, function: doRunCommand, class: Symfony\Component\Console\Application, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/symfony/console/Application.php, line: 167, function: doRun, class: Symfony\Component\Console\Application, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Console/Application.php, line: 94, function: run, class: Symfony\Component\Console\Application, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Foundation/Console/Kernel.php, line: 129, function: run, class: Illuminate\Console\Application, type: '->' }, { file: /Users/katherine/www/brand_media/artisan, line: 37, function: handle, class: Illuminate\Foundation\Console\Kernel, type: '->' }]
                                properties:
                                    message: { type: string, example: 'Trying to get property ''name'' of non-object' }
                                    exception: { type: string, example: ErrorException }
                                    file: { type: string, example: /Users/katherine/www/brand_media/app/Models/News.php }
                                    line: { type: integer, example: 549 }
                                    trace: { type: array, example: [{ file: /Users/katherine/www/brand_media/app/Models/News.php, line: 549, function: handleError, class: Illuminate\Foundation\Bootstrap\HandleExceptions, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/spatie/laravel-feed/src/Feed.php, line: 78, function: toFeedItem, class: App\Models\News, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/spatie/laravel-feed/src/Feed.php, line: 38, function: castToFeedItem, class: Spatie\Feed\Feed, type: '->' }, { function: 'Spatie\Feed\{closure}', class: Spatie\Feed\Feed, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Collections/Collection.php, line: 664, function: array_map }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Database/Eloquent/Collection.php, line: 348, function: map, class: Illuminate\Support\Collection, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/spatie/laravel-feed/src/Feed.php, line: 38, function: map, class: Illuminate\Database\Eloquent\Collection, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/spatie/laravel-feed/src/Http/FeedController.php, line: 31, function: __construct, class: Spatie\Feed\Feed, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Routing/ControllerDispatcher.php, line: 48, function: __invoke, class: Spatie\Feed\Http\FeedController, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Routing/Route.php, line: 262, function: dispatch, class: Illuminate\Routing\ControllerDispatcher, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Routing/Route.php, line: 205, function: runController, class: Illuminate\Routing\Route, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Routing/Router.php, line: 695, function: run, class: Illuminate\Routing\Route, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php, line: 128, function: 'Illuminate\Routing\{closure}', class: Illuminate\Routing\Router, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Routing/Middleware/SubstituteBindings.php, line: 50, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php, line: 167, function: handle, class: Illuminate\Routing\Middleware\SubstituteBindings, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Foundation/Http/Middleware/VerifyCsrfToken.php, line: 78, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php, line: 167, function: handle, class: Illuminate\Foundation\Http\Middleware\VerifyCsrfToken, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/View/Middleware/ShareErrorsFromSession.php, line: 49, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php, line: 167, function: handle, class: Illuminate\View\Middleware\ShareErrorsFromSession, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Session/Middleware/StartSession.php, line: 121, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Session/Middleware/StartSession.php, line: 64, function: handleStatefulRequest, class: Illuminate\Session\Middleware\StartSession, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php, line: 167, function: handle, class: Illuminate\Session\Middleware\StartSession, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Cookie/Middleware/AddQueuedCookiesToResponse.php, line: 37, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php, line: 167, function: handle, class: Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Cookie/Middleware/EncryptCookies.php, line: 67, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php, line: 167, function: handle, class: Illuminate\Cookie\Middleware\EncryptCookies, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php, line: 103, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Routing/Router.php, line: 697, function: then, class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Routing/Router.php, line: 672, function: runRouteWithinStack, class: Illuminate\Routing\Router, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Routing/Router.php, line: 636, function: runRoute, class: Illuminate\Routing\Router, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Routing/Router.php, line: 625, function: dispatchToRoute, class: Illuminate\Routing\Router, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Foundation/Http/Kernel.php, line: 167, function: dispatch, class: Illuminate\Routing\Router, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php, line: 128, function: 'Illuminate\Foundation\Http\{closure}', class: Illuminate\Foundation\Http\Kernel, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Foundation/Http/Middleware/TransformsRequest.php, line: 21, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Foundation/Http/Middleware/ConvertEmptyStringsToNull.php, line: 31, function: handle, class: Illuminate\Foundation\Http\Middleware\TransformsRequest, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php, line: 167, function: handle, class: Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Foundation/Http/Middleware/TransformsRequest.php, line: 21, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Foundation/Http/Middleware/TrimStrings.php, line: 40, function: handle, class: Illuminate\Foundation\Http\Middleware\TransformsRequest, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php, line: 167, function: handle, class: Illuminate\Foundation\Http\Middleware\TrimStrings, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Foundation/Http/Middleware/ValidatePostSize.php, line: 27, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php, line: 167, function: handle, class: Illuminate\Foundation\Http\Middleware\ValidatePostSize, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Foundation/Http/Middleware/PreventRequestsDuringMaintenance.php, line: 86, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php, line: 167, function: handle, class: Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/fruitcake/laravel-cors/src/HandleCors.php, line: 38, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php, line: 167, function: handle, class: Fruitcake\Cors\HandleCors, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Http/Middleware/TrustProxies.php, line: 39, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php, line: 167, function: handle, class: Illuminate\Http\Middleware\TrustProxies, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php, line: 103, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Foundation/Http/Kernel.php, line: 142, function: then, class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Foundation/Http/Kernel.php, line: 111, function: sendRequestThroughRouter, class: Illuminate\Foundation\Http\Kernel, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/knuckleswtf/scribe/src/Extracting/Strategies/Responses/ResponseCalls.php, line: 324, function: handle, class: Illuminate\Foundation\Http\Kernel, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/knuckleswtf/scribe/src/Extracting/Strategies/Responses/ResponseCalls.php, line: 305, function: callLaravelOrLumenRoute, class: Knuckles\Scribe\Extracting\Strategies\Responses\ResponseCalls, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/knuckleswtf/scribe/src/Extracting/Strategies/Responses/ResponseCalls.php, line: 76, function: makeApiCall, class: Knuckles\Scribe\Extracting\Strategies\Responses\ResponseCalls, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/knuckleswtf/scribe/src/Extracting/Strategies/Responses/ResponseCalls.php, line: 51, function: makeResponseCall, class: Knuckles\Scribe\Extracting\Strategies\Responses\ResponseCalls, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/knuckleswtf/scribe/src/Extracting/Strategies/Responses/ResponseCalls.php, line: 41, function: makeResponseCallIfEnabledAndNoSuccessResponses, class: Knuckles\Scribe\Extracting\Strategies\Responses\ResponseCalls, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/knuckleswtf/scribe/src/Extracting/Generator.php, line: 236, function: __invoke, class: Knuckles\Scribe\Extracting\Strategies\Responses\ResponseCalls, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/knuckleswtf/scribe/src/Extracting/Generator.php, line: 172, function: iterateThroughStrategies, class: Knuckles\Scribe\Extracting\Generator, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/knuckleswtf/scribe/src/Extracting/Generator.php, line: 127, function: fetchResponses, class: Knuckles\Scribe\Extracting\Generator, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/knuckleswtf/scribe/src/Commands/GenerateDocumentation.php, line: 119, function: processRoute, class: Knuckles\Scribe\Extracting\Generator, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/knuckleswtf/scribe/src/Commands/GenerateDocumentation.php, line: 73, function: processRoutes, class: Knuckles\Scribe\Commands\GenerateDocumentation, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Container/BoundMethod.php, line: 36, function: handle, class: Knuckles\Scribe\Commands\GenerateDocumentation, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Container/Util.php, line: 40, function: 'Illuminate\Container\{closure}', class: Illuminate\Container\BoundMethod, type: '::' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Container/BoundMethod.php, line: 93, function: unwrapIfClosure, class: Illuminate\Container\Util, type: '::' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Container/BoundMethod.php, line: 37, function: callBoundMethod, class: Illuminate\Container\BoundMethod, type: '::' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Container/Container.php, line: 653, function: call, class: Illuminate\Container\BoundMethod, type: '::' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Console/Command.php, line: 136, function: call, class: Illuminate\Container\Container, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/symfony/console/Command/Command.php, line: 299, function: execute, class: Illuminate\Console\Command, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Console/Command.php, line: 121, function: run, class: Symfony\Component\Console\Command\Command, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/symfony/console/Application.php, line: 978, function: run, class: Illuminate\Console\Command, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/symfony/console/Application.php, line: 295, function: doRunCommand, class: Symfony\Component\Console\Application, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/symfony/console/Application.php, line: 167, function: doRun, class: Symfony\Component\Console\Application, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Console/Application.php, line: 94, function: run, class: Symfony\Component\Console\Application, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Foundation/Console/Kernel.php, line: 129, function: run, class: Illuminate\Console\Application, type: '->' }, { file: /Users/katherine/www/brand_media/artisan, line: 37, function: handle, class: Illuminate\Foundation\Console\Kernel, type: '->' }], items: { type: object } }
            tags:
                - Endpoints
            security: []
    /phpinfo:
        get:
            summary: ''
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: integer
                                example: 1
            tags:
                - Endpoints
            security: []
    '/{any}':
        get:
            summary: ''
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: ''
                    content:
                        text/plain:
                            schema:
                                type: string
                                example: "<!DOCTYPE html>\n<html lang=\"ru\">\n    <head>\n        <meta charset=\"utf-8\">\n        <meta name=\"viewport\" content=\"user-scalable=no, initial-scale=1, maximum-scale=1, minimum-scale=1, width=device-width, height=device-height, target-densitydpi=device-dpi\">\n        <meta name=\"theme-color\" content=\"#002f76\">\n\n        <meta name=\"theme-color\" content=\"#f1f5fc\" media=\"(prefers-color-scheme: light)\">\n        <meta name=\"theme-color\" content=\"#002f76\" media=\"(prefers-color-scheme: dark)\">\n\n        <title>Донбас 24 - только важные новости</title>\n        <link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"/images/favicon.png\">\n\n        <link href=\"/css/app.css\" type=\"text/css\" rel=\"stylesheet\"/>\n        <link href=\"/css/article.css\" type=\"text/css\" rel=\"stylesheet\"/>\n    </head>\n    <body class=\"antialiased\">\n        <div class=\"main\">\n            <div id=\"app\">\n                \n            </div>\n        </div>\n        <svg style=\"display: none;\">\n            <symbol id=\"clock\" viewBox=\"0 0 512 512\">\n                <g>\n                <g>\n                    <path d=\"M256,0c-6.013,0-10.894,4.88-10.894,10.894c0,6.013,4.88,10.894,10.894,10.894c129.144,0,234.213,105.069,234.213,234.213\n                        S385.144,490.213,256,490.213S21.787,385.144,21.787,256c0-6.013-4.88-10.894-10.894-10.894C4.88,245.106,0,249.987,0,256\n                        c0,141.159,114.841,256,256,256s256-114.841,256-256S397.159,0,256,0z\"/>\n                </g>\n                </g>\n                <g>\n                    <g>\n                        <path d=\"M256,81.702c-6.013,0-10.894,4.88-10.894,10.894v152.511h-98.043c-6.013,0-10.894,4.88-10.894,10.894\n                            c0,6.013,4.88,10.894,10.894,10.894H256c6.013,0,10.894-4.88,10.894-10.894V92.596C266.894,86.582,262.013,81.702,256,81.702z\"/>\n                    </g>\n                </g>\n                <g>\n                </g>\n                <g>\n                </g>\n                <g>\n                </g>\n                <g>\n                </g>\n                <g>\n                </g>\n                <g>\n                </g>\n                <g>\n                </g>\n                <g>\n                </g>\n                <g>\n                </g>\n                <g>\n                </g>\n                <g>\n                </g>\n                <g>\n                </g>\n                <g>\n                </g>\n                <g>\n                </g>\n                <g>\n                </g>\n            </symbol>\n            <symbol id=\"quotes\" viewBox=\"0 0 30 25\">\n                <path d=\"M0 12.5V25H12.8572V12.5H4.28575C4.28575 7.9051 8.13098 4.16669 12.8572 4.16669V0C5.7673 0 0 5.60709 0 12.5Z\"/>\n                <path d=\"M30 4.16669V0C22.9101 0 17.1428 5.60709 17.1428 12.5V25H30V12.5H21.4286C21.4286 7.9051 25.2738 4.16669 30 4.16669Z\"/>\n            </symbol>\n            <symbol id=\"like\" viewBox=\"0 0 249 230\">\n                <path d=\"M66.4 10C73 10 79.3 11.1 84.7 13.3C105.1 21.3 115.3 38.7 115.4 38.8L124.1 54.3L132.8 38.9C132.9 38.7 143.1 21.4 163.5 13.4C168.9 11.3 175.3 10.1 181.8 10.1C199.5 10.1 216.3 18.1 225.6 30.9C237.3 47 240.9 63.8 236.3 80.9C232.9 93.7 226 102.1 225.5 102.8L124.2 214.7L22.7 102.7C22.1 101.9 15.3 93.5 11.9 80.8C7.39999 63.7 11 46.9 22.6 30.8C31.9 18 48.7 10 66.4 10ZM181.9 0C174.1 0 166.6 1.3 159.9 4C135.6 13.6 124.2 33.9 124.2 33.9C124.2 33.9 112.7 13.5 88.4 4C81.7 1.4 74.2 0 66.4 0C47.2 0 26.7 8.1 14.5 25C-18.5 70.6 15.2 109.3 15.2 109.3L124.2 229.5L233.2 109.3C233.2 109.3 266.9 70.6 233.9 25C221.6 8.1 201.1 0 181.9 0Z\"/>\n            </symbol>\n            <symbol id=\"share\" viewBox=\"0 0 24 24\">\n                <g clip-path=\"url(#clip0)\">\n                <path d=\"M18.4757 15.2813C17.1962 15.2813 16.0593 15.9031 15.3508 16.8602L9.25158 13.7432C9.3539 13.3956 9.40908 13.028 9.40908 12.6476C9.40908 12.1325 9.30809 11.6406 9.12525 11.1904L15.5176 7.34967C16.2309 8.18682 17.2923 8.71877 18.4757 8.71877C20.6183 8.71877 22.3614 6.97565 22.3614 4.83308C22.3614 2.69051 20.6183 0.947388 18.4757 0.947388C16.3331 0.947388 14.59 2.69051 14.59 4.83308C14.59 5.32829 14.6833 5.80204 14.8529 6.23797L8.44456 10.0883C7.73184 9.2758 6.68655 8.76194 5.52339 8.76194C3.38082 8.76194 1.6377 10.5051 1.6377 12.6476C1.6377 14.7902 3.38082 16.5333 5.52339 16.5333C6.82388 16.5333 7.97707 15.8911 8.68275 14.9071L14.7643 18.015C14.651 18.3792 14.59 18.766 14.59 19.167C14.59 21.3095 16.3331 23.0527 18.4757 23.0527C20.6183 23.0527 22.3614 21.3095 22.3614 19.167C22.3614 17.0244 20.6183 15.2813 18.4757 15.2813ZM18.4757 2.24262C19.9041 2.24262 21.0661 3.4047 21.0661 4.83308C21.0661 6.26146 19.9041 7.42354 18.4757 7.42354C17.0473 7.42354 15.8852 6.26146 15.8852 4.83308C15.8852 3.4047 17.0473 2.24262 18.4757 2.24262ZM5.52339 15.2381C4.09501 15.2381 2.93293 14.076 2.93293 12.6476C2.93293 11.2193 4.09501 10.0572 5.52339 10.0572C6.95177 10.0572 8.11385 11.2193 8.11385 12.6476C8.11385 14.076 6.95177 15.2381 5.52339 15.2381ZM18.4757 21.7574C17.0473 21.7574 15.8852 20.5953 15.8852 19.167C15.8852 17.7386 17.0473 16.5765 18.4757 16.5765C19.9041 16.5765 21.0661 17.7386 21.0661 19.167C21.0661 20.5953 19.9041 21.7574 18.4757 21.7574Z\" />\n                </g>\n                <defs>\n                <clipPath id=\"clip0\">\n                <rect width=\"22.1053\" height=\"22.1053\" fill=\"white\" transform=\"translate(0.947021 0.947388)\"/>\n                </clipPath>\n                </defs> \n            </symbol>\n            <symbol id=\"save\" viewBox=\"0 0 24 24\">\n                <g clip-path=\"url(#clip0s)\">\n                <path d=\"M5.52344 0.947388V23.0527L11.9996 16.7881L18.4757 23.0527V0.947388H5.52344ZM17.1805 20.0107L11.9996 14.9833L6.81867 20.0107V2.24262H17.1805V20.0107Z\" />\n                </g>\n                <defs>\n                <clipPath id=\"clip0\">\n                <rect width=\"22.1053\" height=\"22.1053\" fill=\"white\" transform=\"translate(0.947021 0.947388)\"/>\n                </clipPath>\n                </defs>\n            </symbol>\n            <symbol id=\"place\" viewBox=\"0 0 15 14\">\n                <path d=\"M7.30062 11.614L10.1082 1.27665C10.1326 1.18409 10.0983 1.08674 10.0224 1.02787C9.94558 0.969492 9.84036 0.962791 9.7565 1.01056L0.20752 6.44966C0.120743 6.49909 0.0742688 6.59655 0.091193 6.69451C0.0959007 6.72242 0.10589 6.74893 0.119801 6.7727C0.154081 6.83128 0.213379 6.87394 0.283291 6.88655L4.51933 7.66912L6.8612 11.6709C6.90961 11.7536 7.00414 11.7998 7.10023 11.7871C7.19656 11.7748 7.27552 11.7064 7.30062 11.614ZM4.87937 7.33845C4.84437 7.27864 4.7849 7.23661 4.71629 7.22436L1.00854 6.53952L9.49509 1.70558L6.98705 10.9401L4.87937 7.33845Z\"/>\n                <path d=\"M4.87937 7.33845C4.84437 7.27864 4.7849 7.23661 4.71629 7.22436L1.00854 6.53952L9.49509 1.70558L6.98705 10.9401L4.87937 7.33845Z\"/>\n            </symbol>\n            <symbol id=\"play\" viewBox=\"0 0 14 16\">\n                <path d=\"M13.0163 6.27705C14.3289 7.0507 14.3289 8.94941 13.0163 9.72306L3.46467 15.3526C2.13141 16.1384 0.449165 15.1771 0.449165 13.6296L0.449165 2.37055C0.449165 0.822958 2.13142 -0.138249 3.46467 0.647541L13.0163 6.27705Z\"/>\n            </symbol>\n            <symbol id=\"dislike\" viewBox=\"0 0 237 212\">\n                <path d=\"M61.2 10C67.2 10 72.9 11 77.8 13C90.4 18 98.7 26.8 102.8 32L80.4 75.9L77.2 82.2L82.1 87.3L120 126.9L108.3 189.8L21.5 94.1C20.9 93.4 14.7 85.7 11.7 74.2C7.60002 58.7 10.9 43.5 21.5 28.8C29.9 17.2 45.1 10 61.2 10ZM61.2 0C43.5 0 24.6 7.5 13.4 23C-17 65.1 14 100.7 14 100.7L114.4 211.5L130.7 123.7L89.3 80.4L114.4 31.2C114.4 31.2 103.8 12.5 81.5 3.7C75.3 1.2 68.4 0 61.2 0Z\"/>\n                <path d=\"M175.3 10C191.4 10 206.6 17.2 215 28.9C225.6 43.5 228.9 58.8 224.8 74.3C221.8 85.8 215.6 93.5 215 94.2L138.5 178.6L149.6 120L150.6 114.8L146.9 111.1L112.5 76.5L131.8 36.9C132.1 36.3 140.7 20.1 158.8 13C163.6 11 169.3 10 175.3 10ZM175.3 0C168.1 0 161.2 1.2 155 3.7C132.6 12.5 122.7 32.4 122.7 32.4L100.2 78.4L139.6 118L122 211.5L222.4 100.7C222.4 100.7 253.4 65 223 23C211.8 7.5 192.9 0 175.3 0Z\"/>\n            </symbol>\n            <symbol id=\"telegram\" viewBox=\"0 0 248 231\">\n                <path d=\"M232.7 28.2L198.9 214L104.8 148.9L232.7 28.2ZM248 0L89 150L206 231L248 0Z\" />\n                <path d=\"M215.8 30.9L98.1 141.7L89.1 150.2L99.3 157.2L122.5 173.1L97 191.3L81.6 130.5L80.3 125.4L75.3 123.6L28 106.5L215.8 30.9ZM236 12L0 107L72 133L91 208L140 173L105 149L243 19L236 12Z\" />\n            </symbol>\n            <symbol id=\"facebook\" viewBox=\"0 0 135 250\">\n                <path d=\"M113.2 10C117 10 120.7 10.1 124.3 10.2V33.9L108.4 34.4C93.1 34.9 80.6 48.3 80.6 64.1V95.3C80.6 100.8 85.1 105.3 90.6 105.3H124.3V134.6H90.6C85.1 134.6 80.6 139.1 80.6 144.6V239.2H49.3V144.6C49.3 139.1 44.8 134.6 39.3 134.6H10V105.3H39.3C44.7 105.3 49.2 101 49.3 95.5C49.5 88.8 49.5 82.6 49.5 77.2C49.7 48 49.8 35.9 65.2 21.4C69.7 17.2 76.4 14.1 85.3 12.3C95.1 10.2 105.9 10 113.2 10ZM113.2 0C93.6 0 71.3 1.9 58.4 14.1C36.5 34.8 40.4 53.1 39.4 95.2H0V144.5H39.3V249.1H90.6V144.6H134.3V95.3H90.6V64.1C90.6 54 98.6 44.7 108.7 44.4L134.3 43.5V0.4C128.2 0.3 120.9 0 113.2 0Z\" />\n            </symbol>\n            <symbol id=\"refresh\" viewBox=\"0 0 48 48\">\n                <g class=\"nc-icon-wrapper\">\n                    <path d=\"M35.3 12.7C32.41 9.8 28.42 8 24 8 15.16 8 8.02 15.16 8.02 24S15.16 40 24 40c7.45 0 13.69-5.1 15.46-12H35.3c-1.65 4.66-6.07 8-11.3 8-6.63 0-12-5.37-12-12s5.37-12 12-12c3.31 0 6.28 1.38 8.45 3.55L26 22h14V8l-4.7 4.7z\"/>\n                </g>\n            </symbol>\n            <symbol id=\"down\" viewBox=\"0 0 13 12\" >\n                <path d=\"M6.5 12L0.00481036 0.749999L12.9952 0.75L6.5 12Z\" fill=\"#D60000\"/>\n            </symbol>\n            <symbol id=\"up\" viewBox=\"0 0 13 12\" >\n                <path d=\"M6.5 0L12.9952 11.25L0.00480938 11.25L6.5 0Z\" fill=\"#00BF58\"/>\n            </symbol>\n            <symbol id=\"chevron\" viewBox=\"0 0 30 30\">\n                <g clip-path=\"url(#clip0)\">\n                <path d=\"M15 19.6875L2.81248 7.5H0L15 22.5L30 7.5H27.1875L15 19.6875Z\"/>\n                </g>\n                <defs>\n                <clipPath id=\"clip0\">\n                <rect width=\"30\" height=\"30\" fill=\"white\"/>\n                </clipPath>\n                </defs>\n            </symbol>\n            <symbol id=\"close\" viewBox=\"0 0 496.096 496.096\">\n                <g>\n                    <g>\n                        <path d=\"M259.41,247.998L493.754,13.654c3.123-3.124,3.123-8.188,0-11.312c-3.124-3.123-8.188-3.123-11.312,0L248.098,236.686\n                            L13.754,2.342C10.576-0.727,5.512-0.639,2.442,2.539c-2.994,3.1-2.994,8.015,0,11.115l234.344,234.344L2.442,482.342\n                            c-3.178,3.07-3.266,8.134-0.196,11.312s8.134,3.266,11.312,0.196c0.067-0.064,0.132-0.13,0.196-0.196L248.098,259.31\n                            l234.344,234.344c3.178,3.07,8.242,2.982,11.312-0.196c2.995-3.1,2.995-8.016,0-11.116L259.41,247.998z\"/>\n                    </g>\n                </g>\n                <g>\n                </g>\n                <g>\n                </g>\n                <g>\n                </g>\n                <g>\n                </g>\n                <g>\n                </g>\n                <g>\n                </g>\n                <g>\n                </g>\n                <g>\n                </g>\n                <g>\n                </g>\n                <g>\n                </g>\n                <g>\n                </g>\n                <g>\n                </g>\n                <g>\n                </g>\n                <g>\n                </g>\n                <g>\n                </g>\n            </symbol>\n            <symbol viewBox=\"0 0 121 121\" id=\"cryEmoji\" fill=\"none\">\n                <g clip-path=\"url(#clip0_357:1433)\">\n                <g opacity=\"0.2\">\n                <g opacity=\"0.2\">\n                <path opacity=\"0.2\" d=\"M0.245605 -0.132317L0.245605 120.868L121.246 120.868L121.246 -0.132317L0.245605 -0.132317Z\" stroke-width=\"0.25\" stroke-miterlimit=\"10\"/>\n                <path opacity=\"0.2\" d=\"M60.7456 120.868C94.1588 120.868 121.246 93.7809 121.246 60.3677C121.246 26.9544 94.1588 -0.132324 60.7456 -0.132324C27.3324 -0.132324 0.245605 26.9544 0.245605 60.3677C0.245605 93.7809 27.3324 120.868 60.7456 120.868Z\" stroke-width=\"0.25\" stroke-miterlimit=\"10\"/>\n                <path opacity=\"0.2\" d=\"M60.7456 103.852C84.7614 103.852 104.23 84.3834 104.23 60.3677C104.23 36.3519 84.7614 16.8833 60.7456 16.8833C36.7298 16.8833 17.2612 36.3519 17.2612 60.3677C17.2612 84.3834 36.7298 103.852 60.7456 103.852Z\" stroke-width=\"0.25\" stroke-miterlimit=\"10\"/>\n                <path opacity=\"0.2\" d=\"M121.246 120.868L0.245605 -0.132324\" stroke-width=\"0.25\" stroke-miterlimit=\"10\"/>\n                <path opacity=\"0.2\" d=\"M0.245605 120.868L121.246 -0.132324\" stroke-width=\"0.25\" stroke-miterlimit=\"10\"/>\n                <path opacity=\"0.2\" d=\"M90.9956 -0.132324H30.4956V120.868H90.9956V-0.132324Z\" stroke-width=\"0.25\" stroke-miterlimit=\"10\"/>\n                <path opacity=\"0.2\" d=\"M60.7456 120.868V-0.132324\" stroke-width=\"0.25\" stroke-miterlimit=\"10\"/>\n                <path opacity=\"0.2\" d=\"M121.246 30.1177H0.245605V90.6177H121.246V30.1177Z\" stroke-width=\"0.25\" stroke-miterlimit=\"10\"/>\n                <path opacity=\"0.2\" d=\"M0.245605 60.3677H121.246\" stroke-width=\"0.25\" stroke-miterlimit=\"10\"/>\n                <path opacity=\"0.2\" d=\"M17.2612 16.8833L17.2612 103.852H104.23V16.8833H17.2612Z\" stroke-width=\"0.25\" stroke-miterlimit=\"10\"/>\n                <path opacity=\"0.2\" d=\"M60.7456 90.6177C77.4522 90.6177 90.9956 77.0743 90.9956 60.3677C90.9956 43.6611 77.4522 30.1177 60.7456 30.1177C44.039 30.1177 30.4956 43.6611 30.4956 60.3677C30.4956 77.0743 44.039 90.6177 60.7456 90.6177Z\" stroke-width=\"0.25\" stroke-miterlimit=\"10\"/>\n                <path opacity=\"0.2\" d=\"M60.7456 77.3833C70.1431 77.3833 77.7612 69.7651 77.7612 60.3677C77.7612 50.9702 70.1431 43.3521 60.7456 43.3521C51.3481 43.3521 43.73 50.9702 43.73 60.3677C43.73 69.7651 51.3481 77.3833 60.7456 77.3833Z\" stroke-width=\"0.25\" stroke-miterlimit=\"10\"/>\n                </g>\n                </g>\n                <path d=\"M97.7264 96.006V52.9375C94.3295 53.8146 90.7374 53.5352 87.517 52.1435C85.3134 51.1471 83.3716 49.6519 81.8451 47.7761V106.575C75.6346 109.17 68.9705 110.507 62.2393 110.507C55.5082 110.507 48.844 109.17 42.6336 106.575V47.7194C41.1089 49.5923 39.1662 51.0817 36.9617 52.0678C33.7413 53.4596 30.1491 53.739 26.7523 52.8619V96.006C19.5461 88.9498 14.6051 79.9071 12.5595 70.0312C10.5139 60.1553 11.4565 49.8939 15.267 40.5559C19.0775 31.218 25.5832 23.2267 33.9542 17.6014C42.3252 11.9762 52.1822 8.97192 62.2677 8.97192C72.3532 8.97192 82.2102 11.9762 90.5812 17.6014C98.9522 23.2267 105.458 31.218 109.268 40.5559C113.079 49.8939 114.021 60.1553 111.976 70.0312C109.93 79.9071 104.989 88.9498 97.7831 96.006H97.7264Z\" stroke-width=\"2\" stroke-miterlimit=\"10\"/>\n                <path d=\"M45.6585 41.8396C45.0653 43.9942 44.0213 45.9984 42.5957 47.7194\" stroke-width=\"2\" stroke-miterlimit=\"10\"/>\n                <path d=\"M26.6955 52.9375C25.5685 52.6523 24.4775 52.2401 23.4436 51.7086\" stroke-width=\"2\" stroke-miterlimit=\"10\"/>\n                <path d=\"M42.5957 47.7194V106.575C36.6756 104.088 31.2803 100.502 26.6956 96.0059V52.9375C30.0924 53.8145 33.6846 53.5352 36.9049 52.1434C39.1242 51.1382 41.0742 49.6222 42.5957 47.7194Z\" stroke-width=\"2.15\" stroke-miterlimit=\"10\"/>\n                <path d=\"M81.8073 47.7005C80.3805 45.9902 79.342 43.9905 78.7634 41.8396\" stroke-width=\"2\" stroke-miterlimit=\"10\"/>\n                <path d=\"M100.978 51.6331C99.9443 52.1645 98.8533 52.5768 97.7263 52.862\" stroke-width=\"2\" stroke-miterlimit=\"10\"/>\n                <path d=\"M97.7264 52.9375V96.0059C93.1381 100.506 87.7358 104.093 81.8074 106.574V47.7004C83.3339 49.5762 85.2756 51.0714 87.4792 52.0678C90.7022 53.4933 94.3094 53.7995 97.7264 52.9375V52.9375Z\" stroke-width=\"2.15\" stroke-miterlimit=\"10\"/>\n                <path d=\"M75.3791 70.8984V86.0234C71.0772 83.6152 66.224 82.3644 61.294 82.3934C57.0341 82.463 52.8454 83.4972 49.0427 85.4184V70.8984C49.3704 67.6337 50.8992 64.6071 53.3324 62.4059C55.7656 60.2047 58.9298 58.9858 62.2109 58.9858C65.4921 58.9858 68.6562 60.2047 71.0894 62.4059C73.5227 64.6071 75.0514 67.6337 75.3791 70.8984Z\" stroke-width=\"2.27\" stroke-miterlimit=\"10\"/>\n                <path d=\"M75.3791 85.9667V93.5292H49.0427V85.3617C52.8454 83.4405 57.0341 82.4062 61.294 82.3367C66.224 82.3077 71.0772 83.5584 75.3791 85.9667V85.9667Z\" stroke-width=\"2.27\" stroke-miterlimit=\"10\"/>\n                <path d=\"M25.637 40.7241C31.4854 34.4672 39.5267 30.7142 48.0787 30.25\" stroke-width=\"2.27\" stroke-miterlimit=\"10\"/>\n                <path d=\"M100.203 40.7241C94.3545 34.4672 86.3132 30.7142 77.7612 30.25\" stroke-width=\"2.27\" stroke-miterlimit=\"10\"/>\n                </g>\n                <defs>\n                <clipPath id=\"clip0_357:1433\">\n                <rect width=\"121\" height=\"121\" fill=\"white\"/>\n                </clipPath>\n                </defs>\n            </symbol>\n            <symbol id=\"link\" viewBox=\"0 0 48 48\">\n                <g><g><g><path d=\"M14.101,42.314c-1.87,0-3.628-0.729-4.95-2.051L7.736,38.85c-2.729-2.729-2.729-7.171,0-9.899l9.192-9.192     c1.322-1.322,3.08-2.051,4.95-2.051s3.628,0.729,4.949,2.051l1.414,1.414c0.391,0.391,0.391,1.023,0,1.414s-1.023,0.391-1.414,0     l-1.414-1.414c-0.944-0.944-2.2-1.465-3.535-1.465c-1.336,0-2.592,0.521-3.536,1.465L9.15,30.364     c-1.949,1.949-1.949,5.121,0,7.071l1.414,1.414c0.944,0.944,2.2,1.465,3.536,1.465c1.335,0,2.591-0.521,3.535-1.465L24,32.485     c0.391-0.391,1.023-0.391,1.414,0s0.391,1.023,0,1.414l-6.364,6.364C17.729,41.586,15.971,42.314,14.101,42.314z\"/></g><g><path d=\"M26.121,30.293c-1.869,0-3.628-0.729-4.949-2.051c-0.391-0.391-0.391-1.023,0-1.414s1.023-0.391,1.414,0     c0.944,0.944,2.2,1.465,3.535,1.465c1.336,0,2.592-0.521,3.536-1.465l9.192-9.192c1.949-1.949,1.949-5.121,0-7.07L37.436,9.15     c-1.949-1.949-5.122-1.949-7.071,0L24,15.515c-0.391,0.391-1.023,0.391-1.414,0s-0.391-1.023,0-1.414l6.364-6.364     c2.729-2.729,7.17-2.729,9.899,0l1.414,1.415c2.729,2.729,2.729,7.17,0,9.898l-9.192,9.192     C29.75,29.564,27.991,30.293,26.121,30.293z\"/></g></g></g>\n            </symbol>\n        </svg>\n        <script src=\"/js/app.js\" type=\"text/javascript\"></script>\n        <!-- <script src=\"/js/manifest.js\"></script> -->\n        <!-- <script src=\"/js/vendor.js\"></script> -->\n    </body>\n</html>\n"
            tags:
                - Endpoints
            security: []
        parameters:
            -
                in: path
                name: any
                description: ''
                example: ipsa
                required: true
                schema:
                    type: string
    /api/v1/modules:
        get:
            summary: 'List of modules'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                401:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: Unauthenticated.
                                properties:
                                    message: { type: string, example: Unauthenticated. }
            tags:
                - Modules
    /api/v1/news/image:
        post:
            summary: 'Image Upload'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - News
            requestBody:
                required: false
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                image:
                                    type: required
                                    description: 'Файл картинки'
                                    example: mollitia
            security: []
        delete:
            summary: 'Image Delete'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - News
            requestBody:
                required: false
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                image:
                                    type: required
                                    description: 'Файл картинки'
                                    example: delectus
            security: []
    /api/v1/news/youtube:
        post:
            summary: 'Youtube Image Upload'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - News
            requestBody:
                required: false
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                youtube_id:
                                    type: required
                                    description: 'ID видео на Youtube'
                                    example: cumque
            security: []
    /api/v1/news:
        get:
            summary: 'List of news'
            description: ''
            parameters:
                -
                    in: query
                    name: page
                    description: 'Номер страницы с результатами выдачи'
                    example: 14
                    required: false
                    schema:
                        type: integer
                        description: 'Номер страницы с результатами выдачи'
                        example: 14
                -
                    in: query
                    name: sort
                    description: 'Поле для сортировки. По-умолчанию  ''id|desc'''
                    example: perferendis
                    required: false
                    schema:
                        type: string
                        description: 'Поле для сортировки. По-умолчанию  ''id|desc'''
                        example: perferendis
                -
                    in: query
                    name: search
                    description: 'Строка, которая должна содержаться в результатах выдачи'
                    example: blanditiis
                    required: false
                    schema:
                        type: string
                        description: 'Строка, которая должна содержаться в результатах выдачи'
                        example: blanditiis
                -
                    in: query
                    name: category_id
                    description: 'ID категории'
                    example: 13
                    required: false
                    schema:
                        type: integer
                        description: 'ID категории'
                        example: 13
                -
                    in: query
                    name: tag_id
                    description: 'ID тега'
                    example: 16
                    required: false
                    schema:
                        type: integer
                        description: 'ID тега'
                        example: 16
                -
                    in: query
                    name: author_id
                    description: 'ID автора'
                    example: 9
                    required: false
                    schema:
                        type: integer
                        description: 'ID автора'
                        example: 9
                -
                    in: query
                    name: from
                    description: 'Начало периода в формате ''YYYY-mm-dd HH:ii:ss'''
                    example: eius
                    required: false
                    schema:
                        type: string
                        description: 'Начало периода в формате ''YYYY-mm-dd HH:ii:ss'''
                        example: eius
                -
                    in: query
                    name: till
                    description: 'Окончание периода в формате ''YYYY-mm-dd HH:ii:ss'''
                    example: aut
                    required: false
                    schema:
                        type: string
                        description: 'Окончание периода в формате ''YYYY-mm-dd HH:ii:ss'''
                        example: aut
                -
                    in: query
                    name: status
                    description: 'Статус отображения (возможные значения visible, hidden)'
                    example: optio
                    required: false
                    schema:
                        type: string
                        description: 'Статус отображения (возможные значения visible, hidden)'
                        example: optio
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                401:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: Unauthenticated.
                                properties:
                                    message: { type: string, example: Unauthenticated. }
            tags:
                - News
            security: []
        post:
            summary: 'Create news'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - News
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    description: 'Название новости'
                                    example: qui
                                text:
                                    type: string
                                    description: 'optional Текст новости'
                                    example: ad
                                category_id:
                                    type: integer
                                    description: 'ID категории новости'
                                    example: 20
                                author_id:
                                    type: integer
                                    description: 'ID автора новости'
                                    example: 18
                                image:
                                    type: optional
                                    description: 'Картинка в base64'
                                    example: quia
                                'meta:title':
                                    type: string
                                    description: 'optional Содержимое тега <title>'
                                    example: totam
                                'meta:description':
                                    type: string
                                    description: 'optional Содержимое тега <meta name="description">'
                                    example: odit
                                tag_id:
                                    type: array
                                    description: 'Массив IDs тегов новости'
                                    example: quis
                                position:
                                    type: integer
                                    description: 'Позиция новости в плашке'
                                    example: 11
                                is_promo:
                                    type: integer
                                    description: 'Промо (возможные значения 1, 0)'
                                    example: 18
                            required:
                                - name
    '/api/v1/news/{id}':
        get:
            summary: 'Get specified News'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                401:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: Unauthenticated.
                                properties:
                                    message: { type: string, example: Unauthenticated. }
            tags:
                - News
            security: []
        put:
            summary: 'Update News'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - News
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    description: 'Название новости'
                                    example: vero
                                text:
                                    type: string
                                    description: 'optional Текст новости'
                                    example: quibusdam
                                category_id:
                                    type: integer
                                    description: 'ID категории новости'
                                    example: 16
                                author_id:
                                    type: integer
                                    description: 'ID автора новости'
                                    example: 1
                                image:
                                    type: string
                                    description: 'optional Картинка в base64'
                                    example: voluptatum
                                'meta:title':
                                    type: string
                                    description: 'optional Содержимое тега <title>'
                                    example: id
                                'meta:description':
                                    type: string
                                    description: 'optional Содержимое тега <meta name="description">'
                                    example: ad
                                tag_id:
                                    type: array
                                    description: 'Массив IDs тегов новости'
                                    example: qui
                                position:
                                    type: integer
                                    description: 'Позиция новости в плашке'
                                    example: 13
                                is_promo:
                                    type: integer
                                    description: 'Промо (возможные значения 1, 0)'
                                    example: 9
                            required:
                                - name
        delete:
            summary: 'Delete specified News'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - News
        parameters:
            -
                in: path
                name: id
                description: ''
                example: dignissimos
                required: true
                schema:
                    type: string
    '/api/v1/app/preview/{id}':
        get:
            summary: 'Get specified News'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                401:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: Unauthenticated.
                                properties:
                                    message: { type: string, example: Unauthenticated. }
            tags:
                - 'News Preview'
            security: []
        parameters:
            -
                in: path
                name: id
                description: ''
                example: consequatur
                required: true
                schema:
                    type: string
    /api/v1/templates:
        get:
            summary: 'List of templates'
            description: ''
            parameters:
                -
                    in: query
                    name: page
                    description: 'Номер страницы с результатами выдачи'
                    example: 9
                    required: false
                    schema:
                        type: integer
                        description: 'Номер страницы с результатами выдачи'
                        example: 9
                -
                    in: query
                    name: sort
                    description: 'Поле для сортировки. По-умолчанию  ''id|desc'''
                    example: molestiae
                    required: false
                    schema:
                        type: string
                        description: 'Поле для сортировки. По-умолчанию  ''id|desc'''
                        example: molestiae
                -
                    in: query
                    name: search
                    description: 'Строка, которая должна содержаться в результатах выдачи'
                    example: repudiandae
                    required: false
                    schema:
                        type: string
                        description: 'Строка, которая должна содержаться в результатах выдачи'
                        example: repudiandae
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                401:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: Unauthenticated.
                                properties:
                                    message: { type: string, example: Unauthenticated. }
            tags:
                - 'News Templates'
            security: []
    '/api/v1/template/{id}':
        get:
            summary: 'Get specified Template'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                401:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: Unauthenticated.
                                properties:
                                    message: { type: string, example: Unauthenticated. }
            tags:
                - 'News Templates'
            security: []
        put:
            summary: 'Update Template'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'News Templates'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    description: 'Название новости'
                                    example: iste
                                text:
                                    type: string
                                    description: 'optional Текст новости'
                                    example: harum
                            required:
                                - name
        delete:
            summary: 'Delete specified Template'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'News Templates'
        parameters:
            -
                in: path
                name: id
                description: ''
                example: quae
                required: true
                schema:
                    type: string
    /api/v1/template:
        post:
            summary: 'Create template'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'News Templates'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    description: 'Название новости'
                                    example: exercitationem
                                text:
                                    type: string
                                    description: 'optional Текст новости'
                                    example: voluptatem
                            required:
                                - name
    /api/v1/page/image:
        post:
            summary: 'Image Upload'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Pages
            requestBody:
                required: false
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                image:
                                    type: required
                                    description: 'Файл картинки'
                                    example: minus
            security: []
        delete:
            summary: 'Image Delete'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Pages
            requestBody:
                required: false
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                image:
                                    type: required
                                    description: 'Файл картинки'
                                    example: earum
            security: []
    /api/v1/page/youtube:
        post:
            summary: 'Youtube Image Upload'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Pages
            requestBody:
                required: false
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                youtube_id:
                                    type: required
                                    description: 'ID видео на Youtube'
                                    example: error
            security: []
    /api/v1/pages:
        get:
            summary: 'List of pages'
            description: ''
            parameters:
                -
                    in: query
                    name: page
                    description: 'Номер страницы с результатами выдачи'
                    example: 8
                    required: false
                    schema:
                        type: integer
                        description: 'Номер страницы с результатами выдачи'
                        example: 8
                -
                    in: query
                    name: sort
                    description: 'Поле для сортировки. По-умолчанию  ''id|desc'''
                    example: et
                    required: false
                    schema:
                        type: string
                        description: 'Поле для сортировки. По-умолчанию  ''id|desc'''
                        example: et
                -
                    in: query
                    name: search
                    description: 'Строка, которая должна содержаться в результатах выдачи'
                    example: est
                    required: false
                    schema:
                        type: string
                        description: 'Строка, которая должна содержаться в результатах выдачи'
                        example: est
                -
                    in: query
                    name: uri
                    description: 'Путь, по которому должна открываться страница в приложении'
                    example: optio
                    required: false
                    schema:
                        type: string
                        description: 'Путь, по которому должна открываться страница в приложении'
                        example: optio
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                401:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: Unauthenticated.
                                properties:
                                    message: { type: string, example: Unauthenticated. }
            tags:
                - Pages
    /api/v1/page:
        post:
            summary: 'Create a page'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Pages
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    description: 'Название страницы'
                                    example: at
                                text:
                                    type: string
                                    description: 'Описание приложения'
                                    example: ut
                                image:
                                    type: optional
                                    description: 'Картинка в base64'
                                    example: sed
                                meta_title:
                                    type: string
                                    description: 'Содержимое тега title'
                                    example: labore
                                meta_description:
                                    type: string
                                    description: 'Содержимое тега meta name="description"'
                                    example: sunt
                                status:
                                    type: integer
                                    description: 'Статус отображения (1-отображается, 0-скрыто)'
                                    example: 8
                            required:
                                - name
    '/api/v1/page/{id}':
        get:
            summary: 'Get specified page'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                401:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: Unauthenticated.
                                properties:
                                    message: { type: string, example: Unauthenticated. }
            tags:
                - Pages
            security: []
        put:
            summary: 'Update specified page'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Pages
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    description: 'Название страницы'
                                    example: alias
                                text:
                                    type: string
                                    description: 'Описание приложения'
                                    example: nam
                                image:
                                    type: optional
                                    description: 'Картинка в base64'
                                    example: omnis
                                meta_title:
                                    type: string
                                    description: 'Содержимое тега title'
                                    example: doloremque
                                meta_description:
                                    type: string
                                    description: 'Содержимое тега meta name="description"'
                                    example: aliquid
                                status:
                                    type: integer
                                    description: 'Статус отображения (1-отображается, 0-скрыто)'
                                    example: 19
                            required:
                                - name
        delete:
            summary: 'Delete specified page'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Pages
        parameters:
            -
                in: path
                name: id
                description: ''
                example: et
                required: true
                schema:
                    type: string
    '/api/v1/app/page/{uri}':
        get:
            summary: 'Get specified page by its uri'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                404:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    status: error
                                    message: 'Ресурс не знайден.'
                                properties:
                                    status: { type: string, example: error }
                                    message: { type: string, example: 'Ресурс не знайден.' }
            tags:
                - Pages
            security: []
        parameters:
            -
                in: path
                name: uri
                description: ''
                example: qui
                required: true
                schema:
                    type: string
    /api/v1/app/reaction:
        post:
            summary: 'Create Reactions'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Reactions
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                token:
                                    type: string
                                    description: 'Название организации'
                                    example: sit
                                action:
                                    type: string
                                    description: 'Действие (like, dislike)'
                                    example: tempore
                                news_id:
                                    type: integer
                                    description: 'ID новости'
                                    example: 13
                            required:
                                - token
                                - action
    /api/v1/roles:
        get:
            summary: 'List of roles'
            description: ''
            parameters:
                -
                    in: query
                    name: page
                    description: 'Номер страницы с результатами выдачи'
                    example: 9
                    required: false
                    schema:
                        type: integer
                        description: 'Номер страницы с результатами выдачи'
                        example: 9
                -
                    in: query
                    name: sort
                    description: 'Поле для сортировки. По-умолчанию  ''name|аsc'''
                    example: iusto
                    required: false
                    schema:
                        type: string
                        description: 'Поле для сортировки. По-умолчанию  ''name|аsc'''
                        example: iusto
                -
                    in: query
                    name: search
                    description: 'Строка, которая должна содержаться в результатах выдачи'
                    example: dignissimos
                    required: false
                    schema:
                        type: string
                        description: 'Строка, которая должна содержаться в результатах выдачи'
                        example: dignissimos
                -
                    in: query
                    name: user_id
                    description: 'ID пользователя (для просмотра всех ролей пользователя)'
                    example: 1
                    required: false
                    schema:
                        type: integer
                        description: 'ID пользователя (для просмотра всех ролей пользователя)'
                        example: 1
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                401:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: Unauthenticated.
                                properties:
                                    message: { type: string, example: Unauthenticated. }
            tags:
                - Roles
    /api/v1/role:
        post:
            summary: 'Create a role'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Roles
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    description: 'Название роли (максимальная длина 50 символов)'
                                    example: occaecati
                                module_id:
                                    type: integer
                                    description: 'optional Массив IDs модулей админ-панели'
                                    example: 17
                            required:
                                - name
    '/api/v1/role/{id}':
        get:
            summary: 'Get specified role'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                401:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: Unauthenticated.
                                properties:
                                    message: { type: string, example: Unauthenticated. }
            tags:
                - Roles
        put:
            summary: 'Update specified role'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Roles
            requestBody:
                required: false
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    description: 'Название роли'
                                    example: omnis
                                module_id:
                                    type: integer
                                    description: 'optional Массив IDs модулей админ-панели'
                                    example: 12
        delete:
            summary: 'Delete specified role'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Roles
        parameters:
            -
                in: path
                name: id
                description: ''
                example: 11
                required: true
                schema:
                    type: integer
    /api/v1/tags:
        get:
            summary: 'List of Tags'
            description: ''
            parameters:
                -
                    in: query
                    name: page
                    description: 'Номер страницы с результатами выдачи'
                    example: 16
                    required: false
                    schema:
                        type: integer
                        description: 'Номер страницы с результатами выдачи'
                        example: 16
                -
                    in: query
                    name: sort
                    description: 'Поле для сортировки. По-умолчанию  ''id|desc'''
                    example: quae
                    required: false
                    schema:
                        type: string
                        description: 'Поле для сортировки. По-умолчанию  ''id|desc'''
                        example: quae
                -
                    in: query
                    name: search
                    description: 'Строка, которая должна содержаться в результатах выдачи'
                    example: itaque
                    required: false
                    schema:
                        type: string
                        description: 'Строка, которая должна содержаться в результатах выдачи'
                        example: itaque
                -
                    in: query
                    name: status
                    description: 'Статус отображения (возможные значения visible, hidden)'
                    example: omnis
                    required: false
                    schema:
                        type: string
                        description: 'Статус отображения (возможные значения visible, hidden)'
                        example: omnis
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                401:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: Unauthenticated.
                                properties:
                                    message: { type: string, example: Unauthenticated. }
            tags:
                - Tags
            security: []
    '/api/v1/tag/{id}':
        get:
            summary: 'Get specified Tags'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                401:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: Unauthenticated.
                                properties:
                                    message: { type: string, example: Unauthenticated. }
            tags:
                - Tags
            security: []
        put:
            summary: 'Update Tags'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Tags
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    description: 'Название тега'
                                    example: tempora
                                status:
                                    type: integer
                                    description: 'Статус отображения (1-отображается, 0-скрыто)'
                                    example: 18
                                meta_title:
                                    type: string
                                    description: 'Тег title'
                                    example: quia
                                meta_description:
                                    type: string
                                    description: 'Тег description'
                                    example: et
                                is_system:
                                    type: integer
                                    description: 'Видимость тега (1-системный, 0-видимый)'
                                    example: 4
                            required:
                                - name
                                - meta_title
                                - meta_description
        delete:
            summary: 'Delete specified Tags'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Tags
        parameters:
            -
                in: path
                name: id
                description: ''
                example: adipisci
                required: true
                schema:
                    type: string
    /api/v1/tag:
        post:
            summary: 'Create Tags'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Tags
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    description: 'Название тега'
                                    example: provident
                                status:
                                    type: integer
                                    description: 'Статус отображения (1-отображается, 0-скрыто)'
                                    example: 9
                                meta_title:
                                    type: string
                                    description: 'Тег title'
                                    example: quasi
                                meta_description:
                                    type: string
                                    description: 'Тег description'
                                    example: dolor
                                is_system:
                                    type: integer
                                    description: 'Видимость тега (1-системный, 0-видимый)'
                                    example: 19
                            required:
                                - name
                                - meta_title
                                - meta_description
    /api/v1/app/tags:
        get:
            summary: 'List of Tags'
            description: ''
            parameters:
                -
                    in: query
                    name: page
                    description: 'Номер страницы с результатами выдачи'
                    example: 18
                    required: false
                    schema:
                        type: integer
                        description: 'Номер страницы с результатами выдачи'
                        example: 18
                -
                    in: query
                    name: sort
                    description: 'Поле для сортировки. По-умолчанию  ''id|desc'''
                    example: quidem
                    required: false
                    schema:
                        type: string
                        description: 'Поле для сортировки. По-умолчанию  ''id|desc'''
                        example: quidem
                -
                    in: query
                    name: search
                    description: 'Строка, которая должна содержаться в результатах выдачи'
                    example: tempore
                    required: false
                    schema:
                        type: string
                        description: 'Строка, которая должна содержаться в результатах выдачи'
                        example: tempore
                -
                    in: query
                    name: status
                    description: 'Статус отображения (возможные значения visible, hidden)'
                    example: enim
                    required: false
                    schema:
                        type: string
                        description: 'Статус отображения (возможные значения visible, hidden)'
                        example: enim
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    current_page: 18
                                    data: []
                                    first_page_url: 'http://localhost/api/v1/app/tags?page=1'
                                    from: null
                                    last_page: 1
                                    last_page_url: 'http://localhost/api/v1/app/tags?page=1'
                                    links: [{ url: 'http://localhost/api/v1/app/tags?page=17', label: '&laquo; Назад', active: false }, { url: 'http://localhost/api/v1/app/tags?page=1', label: '1', active: false }, { url: null, label: 'Вперёд &raquo;', active: false }]
                                    next_page_url: null
                                    path: 'http://localhost/api/v1/app/tags'
                                    per_page: 30
                                    prev_page_url: 'http://localhost/api/v1/app/tags?page=17'
                                    to: null
                                    total: 0
                                properties:
                                    current_page: { type: integer, example: 18 }
                                    data: { type: array, example: [] }
                                    first_page_url: { type: string, example: 'http://localhost/api/v1/app/tags?page=1' }
                                    from: { type: string, example: null }
                                    last_page: { type: integer, example: 1 }
                                    last_page_url: { type: string, example: 'http://localhost/api/v1/app/tags?page=1' }
                                    links: { type: array, example: [{ url: 'http://localhost/api/v1/app/tags?page=17', label: '&laquo; Назад', active: false }, { url: 'http://localhost/api/v1/app/tags?page=1', label: '1', active: false }, { url: null, label: 'Вперёд &raquo;', active: false }], items: { type: object } }
                                    next_page_url: { type: string, example: null }
                                    path: { type: string, example: 'http://localhost/api/v1/app/tags' }
                                    per_page: { type: integer, example: 30 }
                                    prev_page_url: { type: string, example: 'http://localhost/api/v1/app/tags?page=17' }
                                    to: { type: string, example: null }
                                    total: { type: integer, example: 0 }
            tags:
                - Tags
            security: []
    '/api/v1/app/tag/{id}':
        get:
            summary: 'Get specified Tags'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                404:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    status: error
                                    message: 'Ресурс не знайден.'
                                properties:
                                    status: { type: string, example: error }
                                    message: { type: string, example: 'Ресурс не знайден.' }
            tags:
                - Tags
            security: []
        parameters:
            -
                in: path
                name: id
                description: ''
                example: delectus
                required: true
                schema:
                    type: string
    /api/v1/token:
        post:
            summary: 'Get token for user'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Users
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                email:
                                    type: string
                                    description: Email
                                    example: quod
                                password:
                                    type: string
                                    description: Пароль
                                    example: suscipit
                            required:
                                - email
                                - password
            security: []
    /api/v1/login:
        post:
            summary: 'Login user'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Users
            requestBody:
                required: false
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                email:
                                    type: string
                                    description: Email
                                    example: eum
                                password:
                                    type: string
                                    description: Пароль
                                    example: excepturi
            security: []
    /api/v1/users:
        get:
            summary: 'List of users'
            description: ''
            parameters:
                -
                    in: query
                    name: page
                    description: 'Номер страницы с результатами выдачи'
                    example: 10
                    required: false
                    schema:
                        type: integer
                        description: 'Номер страницы с результатами выдачи'
                        example: 10
                -
                    in: query
                    name: sort
                    description: 'Поле для сортировки. По-умолчанию ''id|desc'''
                    example: magnam
                    required: false
                    schema:
                        type: string
                        description: 'Поле для сортировки. По-умолчанию ''id|desc'''
                        example: magnam
                -
                    in: query
                    name: search
                    description: 'Строка, которая должна содержаться в результатах выдачи'
                    example: ut
                    required: false
                    schema:
                        type: string
                        description: 'Строка, которая должна содержаться в результатах выдачи'
                        example: ut
                -
                    in: query
                    name: role_id
                    description: 'IDs ролей пользователей через запятую (для получения списка пользователей по роли)'
                    example: labore
                    required: false
                    schema:
                        type: string
                        description: 'IDs ролей пользователей через запятую (для получения списка пользователей по роли)'
                        example: labore
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                401:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: Unauthenticated.
                                properties:
                                    message: { type: string, example: Unauthenticated. }
            tags:
                - Users
    /api/v1/user:
        post:
            summary: 'Create a user'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Users
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                firstname:
                                    type: string
                                    description: Имя
                                    example: consequuntur
                                middlename:
                                    type: string
                                    description: Отчество
                                    example: in
                                lastname:
                                    type: string
                                    description: Фамилия
                                    example: aut
                                email:
                                    type: string
                                    description: Email
                                    example: voluptatem
                                password:
                                    type: string
                                    description: Пароль
                                    example: provident
                                password_confirmation:
                                    type: string
                                    description: 'Пароль підтвердження'
                                    example: quasi
                                role_id:
                                    type: array
                                    description: 'optional Массив IDs ролей пользователей'
                                    example: [14, 2]
                                    items: { type: integer }
                            required:
                                - firstname
                                - middlename
                                - lastname
                                - email
                                - password
                                - password_confirmation
        get:
            summary: 'Get specified user'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                401:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: Unauthenticated.
                                properties:
                                    message: { type: string, example: Unauthenticated. }
            tags:
                - Users
    '/api/v1/user/{id}':
        get:
            summary: 'Get specified user'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                401:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: Unauthenticated.
                                properties:
                                    message: { type: string, example: Unauthenticated. }
            tags:
                - Users
        put:
            summary: 'Update specified user'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Users
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                firstname:
                                    type: string
                                    description: Имя
                                    example: omnis
                                middlename:
                                    type: string
                                    description: Отчество
                                    example: ipsam
                                lastname:
                                    type: string
                                    description: Фамилия
                                    example: accusantium
                                email:
                                    type: string
                                    description: Email
                                    example: adipisci
                                password:
                                    type: string
                                    description: Пароль
                                    example: et
                                password_confirmation:
                                    type: string
                                    description: 'Пароль підтвердження'
                                    example: qui
                                role_id:
                                    type: array
                                    description: 'Массив IDs ролей пользователей'
                                    example: [18, 12]
                                    items: { type: integer }
                            required:
                                - password_confirmation
        delete:
            summary: 'Delete specified user'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Users
        parameters:
            -
                in: path
                name: id
                description: ''
                example: 16
                required: true
                schema:
                    type: integer
    /api/v1/app/news:
        get:
            summary: 'List of news'
            description: ''
            parameters:
                -
                    in: query
                    name: page
                    description: 'Номер страницы с результатами выдачи'
                    example: 4
                    required: false
                    schema:
                        type: integer
                        description: 'Номер страницы с результатами выдачи'
                        example: 4
                -
                    in: query
                    name: sort
                    description: 'Поле для сортировки. По-умолчанию  ''id|desc'''
                    example: hic
                    required: false
                    schema:
                        type: string
                        description: 'Поле для сортировки. По-умолчанию  ''id|desc'''
                        example: hic
                -
                    in: query
                    name: category
                    description: 'URI категории (для получения списка новостей по категории)'
                    example: soluta
                    required: false
                    schema:
                        type: string
                        description: 'URI категории (для получения списка новостей по категории)'
                        example: soluta
                -
                    in: query
                    name: author
                    description: 'URI автора (для получения списка новостей одного автора)'
                    example: autem
                    required: false
                    schema:
                        type: string
                        description: 'URI автора (для получения списка новостей одного автора)'
                        example: autem
                -
                    in: query
                    name: tag
                    description: 'URI тега (для получения списка новостей по одному тегу)'
                    example: quos
                    required: false
                    schema:
                        type: string
                        description: 'URI тега (для получения списка новостей по одному тегу)'
                        example: quos
                -
                    in: query
                    name: main
                    description: 'Запрос для получения новостей для главной ленты'
                    example: laborum
                    required: false
                    schema:
                        type: string
                        description: 'Запрос для получения новостей для главной ленты'
                        example: laborum
                -
                    in: query
                    name: status
                    description: 'Статус отображения (возможные значения visible, hidden)'
                    example: recusandae
                    required: false
                    schema:
                        type: string
                        description: 'Статус отображения (возможные значения visible, hidden)'
                        example: recusandae
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                500:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Trying to get property ''id'' of non-object'
                                    exception: ErrorException
                                    file: /Users/katherine/www/brand_media/app/Models/News.php
                                    line: 240
                                    trace: [{ file: /Users/katherine/www/brand_media/app/Models/News.php, line: 240, function: handleError, class: Illuminate\Foundation\Bootstrap\HandleExceptions, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Support/Traits/Conditionable.php, line: 18, function: 'App\Models\{closure}', class: App\Models\News, type: '->' }, { file: /Users/katherine/www/brand_media/app/Models/News.php, line: 243, function: when, class: Illuminate\Database\Eloquent\Builder, type: '->' }, { file: /Users/katherine/www/brand_media/app/Http/Controllers/Web/NewsController.php, line: 39, function: getAll, class: App\Models\News, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Routing/Controller.php, line: 54, function: index, class: App\Http\Controllers\Web\NewsController, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Routing/ControllerDispatcher.php, line: 45, function: callAction, class: Illuminate\Routing\Controller, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Routing/Route.php, line: 262, function: dispatch, class: Illuminate\Routing\ControllerDispatcher, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Routing/Route.php, line: 205, function: runController, class: Illuminate\Routing\Route, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Routing/Router.php, line: 695, function: run, class: Illuminate\Routing\Route, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php, line: 128, function: 'Illuminate\Routing\{closure}', class: Illuminate\Routing\Router, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Routing/Middleware/SubstituteBindings.php, line: 50, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php, line: 167, function: handle, class: Illuminate\Routing\Middleware\SubstituteBindings, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php, line: 103, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Routing/Router.php, line: 697, function: then, class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Routing/Router.php, line: 672, function: runRouteWithinStack, class: Illuminate\Routing\Router, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Routing/Router.php, line: 636, function: runRoute, class: Illuminate\Routing\Router, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Routing/Router.php, line: 625, function: dispatchToRoute, class: Illuminate\Routing\Router, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Foundation/Http/Kernel.php, line: 167, function: dispatch, class: Illuminate\Routing\Router, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php, line: 128, function: 'Illuminate\Foundation\Http\{closure}', class: Illuminate\Foundation\Http\Kernel, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Foundation/Http/Middleware/TransformsRequest.php, line: 21, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Foundation/Http/Middleware/ConvertEmptyStringsToNull.php, line: 31, function: handle, class: Illuminate\Foundation\Http\Middleware\TransformsRequest, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php, line: 167, function: handle, class: Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Foundation/Http/Middleware/TransformsRequest.php, line: 21, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Foundation/Http/Middleware/TrimStrings.php, line: 40, function: handle, class: Illuminate\Foundation\Http\Middleware\TransformsRequest, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php, line: 167, function: handle, class: Illuminate\Foundation\Http\Middleware\TrimStrings, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Foundation/Http/Middleware/ValidatePostSize.php, line: 27, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php, line: 167, function: handle, class: Illuminate\Foundation\Http\Middleware\ValidatePostSize, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Foundation/Http/Middleware/PreventRequestsDuringMaintenance.php, line: 86, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php, line: 167, function: handle, class: Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/fruitcake/laravel-cors/src/HandleCors.php, line: 52, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php, line: 167, function: handle, class: Fruitcake\Cors\HandleCors, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Http/Middleware/TrustProxies.php, line: 39, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php, line: 167, function: handle, class: Illuminate\Http\Middleware\TrustProxies, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php, line: 103, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Foundation/Http/Kernel.php, line: 142, function: then, class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Foundation/Http/Kernel.php, line: 111, function: sendRequestThroughRouter, class: Illuminate\Foundation\Http\Kernel, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/knuckleswtf/scribe/src/Extracting/Strategies/Responses/ResponseCalls.php, line: 324, function: handle, class: Illuminate\Foundation\Http\Kernel, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/knuckleswtf/scribe/src/Extracting/Strategies/Responses/ResponseCalls.php, line: 305, function: callLaravelOrLumenRoute, class: Knuckles\Scribe\Extracting\Strategies\Responses\ResponseCalls, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/knuckleswtf/scribe/src/Extracting/Strategies/Responses/ResponseCalls.php, line: 76, function: makeApiCall, class: Knuckles\Scribe\Extracting\Strategies\Responses\ResponseCalls, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/knuckleswtf/scribe/src/Extracting/Strategies/Responses/ResponseCalls.php, line: 51, function: makeResponseCall, class: Knuckles\Scribe\Extracting\Strategies\Responses\ResponseCalls, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/knuckleswtf/scribe/src/Extracting/Strategies/Responses/ResponseCalls.php, line: 41, function: makeResponseCallIfEnabledAndNoSuccessResponses, class: Knuckles\Scribe\Extracting\Strategies\Responses\ResponseCalls, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/knuckleswtf/scribe/src/Extracting/Generator.php, line: 236, function: __invoke, class: Knuckles\Scribe\Extracting\Strategies\Responses\ResponseCalls, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/knuckleswtf/scribe/src/Extracting/Generator.php, line: 172, function: iterateThroughStrategies, class: Knuckles\Scribe\Extracting\Generator, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/knuckleswtf/scribe/src/Extracting/Generator.php, line: 127, function: fetchResponses, class: Knuckles\Scribe\Extracting\Generator, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/knuckleswtf/scribe/src/Commands/GenerateDocumentation.php, line: 119, function: processRoute, class: Knuckles\Scribe\Extracting\Generator, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/knuckleswtf/scribe/src/Commands/GenerateDocumentation.php, line: 73, function: processRoutes, class: Knuckles\Scribe\Commands\GenerateDocumentation, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Container/BoundMethod.php, line: 36, function: handle, class: Knuckles\Scribe\Commands\GenerateDocumentation, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Container/Util.php, line: 40, function: 'Illuminate\Container\{closure}', class: Illuminate\Container\BoundMethod, type: '::' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Container/BoundMethod.php, line: 93, function: unwrapIfClosure, class: Illuminate\Container\Util, type: '::' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Container/BoundMethod.php, line: 37, function: callBoundMethod, class: Illuminate\Container\BoundMethod, type: '::' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Container/Container.php, line: 653, function: call, class: Illuminate\Container\BoundMethod, type: '::' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Console/Command.php, line: 136, function: call, class: Illuminate\Container\Container, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/symfony/console/Command/Command.php, line: 299, function: execute, class: Illuminate\Console\Command, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Console/Command.php, line: 121, function: run, class: Symfony\Component\Console\Command\Command, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/symfony/console/Application.php, line: 978, function: run, class: Illuminate\Console\Command, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/symfony/console/Application.php, line: 295, function: doRunCommand, class: Symfony\Component\Console\Application, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/symfony/console/Application.php, line: 167, function: doRun, class: Symfony\Component\Console\Application, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Console/Application.php, line: 94, function: run, class: Symfony\Component\Console\Application, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Foundation/Console/Kernel.php, line: 129, function: run, class: Illuminate\Console\Application, type: '->' }, { file: /Users/katherine/www/brand_media/artisan, line: 37, function: handle, class: Illuminate\Foundation\Console\Kernel, type: '->' }]
                                properties:
                                    message: { type: string, example: 'Trying to get property ''id'' of non-object' }
                                    exception: { type: string, example: ErrorException }
                                    file: { type: string, example: /Users/katherine/www/brand_media/app/Models/News.php }
                                    line: { type: integer, example: 240 }
                                    trace: { type: array, example: [{ file: /Users/katherine/www/brand_media/app/Models/News.php, line: 240, function: handleError, class: Illuminate\Foundation\Bootstrap\HandleExceptions, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Support/Traits/Conditionable.php, line: 18, function: 'App\Models\{closure}', class: App\Models\News, type: '->' }, { file: /Users/katherine/www/brand_media/app/Models/News.php, line: 243, function: when, class: Illuminate\Database\Eloquent\Builder, type: '->' }, { file: /Users/katherine/www/brand_media/app/Http/Controllers/Web/NewsController.php, line: 39, function: getAll, class: App\Models\News, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Routing/Controller.php, line: 54, function: index, class: App\Http\Controllers\Web\NewsController, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Routing/ControllerDispatcher.php, line: 45, function: callAction, class: Illuminate\Routing\Controller, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Routing/Route.php, line: 262, function: dispatch, class: Illuminate\Routing\ControllerDispatcher, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Routing/Route.php, line: 205, function: runController, class: Illuminate\Routing\Route, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Routing/Router.php, line: 695, function: run, class: Illuminate\Routing\Route, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php, line: 128, function: 'Illuminate\Routing\{closure}', class: Illuminate\Routing\Router, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Routing/Middleware/SubstituteBindings.php, line: 50, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php, line: 167, function: handle, class: Illuminate\Routing\Middleware\SubstituteBindings, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php, line: 103, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Routing/Router.php, line: 697, function: then, class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Routing/Router.php, line: 672, function: runRouteWithinStack, class: Illuminate\Routing\Router, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Routing/Router.php, line: 636, function: runRoute, class: Illuminate\Routing\Router, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Routing/Router.php, line: 625, function: dispatchToRoute, class: Illuminate\Routing\Router, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Foundation/Http/Kernel.php, line: 167, function: dispatch, class: Illuminate\Routing\Router, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php, line: 128, function: 'Illuminate\Foundation\Http\{closure}', class: Illuminate\Foundation\Http\Kernel, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Foundation/Http/Middleware/TransformsRequest.php, line: 21, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Foundation/Http/Middleware/ConvertEmptyStringsToNull.php, line: 31, function: handle, class: Illuminate\Foundation\Http\Middleware\TransformsRequest, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php, line: 167, function: handle, class: Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Foundation/Http/Middleware/TransformsRequest.php, line: 21, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Foundation/Http/Middleware/TrimStrings.php, line: 40, function: handle, class: Illuminate\Foundation\Http\Middleware\TransformsRequest, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php, line: 167, function: handle, class: Illuminate\Foundation\Http\Middleware\TrimStrings, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Foundation/Http/Middleware/ValidatePostSize.php, line: 27, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php, line: 167, function: handle, class: Illuminate\Foundation\Http\Middleware\ValidatePostSize, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Foundation/Http/Middleware/PreventRequestsDuringMaintenance.php, line: 86, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php, line: 167, function: handle, class: Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/fruitcake/laravel-cors/src/HandleCors.php, line: 52, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php, line: 167, function: handle, class: Fruitcake\Cors\HandleCors, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Http/Middleware/TrustProxies.php, line: 39, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php, line: 167, function: handle, class: Illuminate\Http\Middleware\TrustProxies, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php, line: 103, function: 'Illuminate\Pipeline\{closure}', class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Foundation/Http/Kernel.php, line: 142, function: then, class: Illuminate\Pipeline\Pipeline, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Foundation/Http/Kernel.php, line: 111, function: sendRequestThroughRouter, class: Illuminate\Foundation\Http\Kernel, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/knuckleswtf/scribe/src/Extracting/Strategies/Responses/ResponseCalls.php, line: 324, function: handle, class: Illuminate\Foundation\Http\Kernel, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/knuckleswtf/scribe/src/Extracting/Strategies/Responses/ResponseCalls.php, line: 305, function: callLaravelOrLumenRoute, class: Knuckles\Scribe\Extracting\Strategies\Responses\ResponseCalls, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/knuckleswtf/scribe/src/Extracting/Strategies/Responses/ResponseCalls.php, line: 76, function: makeApiCall, class: Knuckles\Scribe\Extracting\Strategies\Responses\ResponseCalls, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/knuckleswtf/scribe/src/Extracting/Strategies/Responses/ResponseCalls.php, line: 51, function: makeResponseCall, class: Knuckles\Scribe\Extracting\Strategies\Responses\ResponseCalls, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/knuckleswtf/scribe/src/Extracting/Strategies/Responses/ResponseCalls.php, line: 41, function: makeResponseCallIfEnabledAndNoSuccessResponses, class: Knuckles\Scribe\Extracting\Strategies\Responses\ResponseCalls, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/knuckleswtf/scribe/src/Extracting/Generator.php, line: 236, function: __invoke, class: Knuckles\Scribe\Extracting\Strategies\Responses\ResponseCalls, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/knuckleswtf/scribe/src/Extracting/Generator.php, line: 172, function: iterateThroughStrategies, class: Knuckles\Scribe\Extracting\Generator, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/knuckleswtf/scribe/src/Extracting/Generator.php, line: 127, function: fetchResponses, class: Knuckles\Scribe\Extracting\Generator, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/knuckleswtf/scribe/src/Commands/GenerateDocumentation.php, line: 119, function: processRoute, class: Knuckles\Scribe\Extracting\Generator, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/knuckleswtf/scribe/src/Commands/GenerateDocumentation.php, line: 73, function: processRoutes, class: Knuckles\Scribe\Commands\GenerateDocumentation, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Container/BoundMethod.php, line: 36, function: handle, class: Knuckles\Scribe\Commands\GenerateDocumentation, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Container/Util.php, line: 40, function: 'Illuminate\Container\{closure}', class: Illuminate\Container\BoundMethod, type: '::' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Container/BoundMethod.php, line: 93, function: unwrapIfClosure, class: Illuminate\Container\Util, type: '::' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Container/BoundMethod.php, line: 37, function: callBoundMethod, class: Illuminate\Container\BoundMethod, type: '::' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Container/Container.php, line: 653, function: call, class: Illuminate\Container\BoundMethod, type: '::' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Console/Command.php, line: 136, function: call, class: Illuminate\Container\Container, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/symfony/console/Command/Command.php, line: 299, function: execute, class: Illuminate\Console\Command, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Console/Command.php, line: 121, function: run, class: Symfony\Component\Console\Command\Command, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/symfony/console/Application.php, line: 978, function: run, class: Illuminate\Console\Command, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/symfony/console/Application.php, line: 295, function: doRunCommand, class: Symfony\Component\Console\Application, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/symfony/console/Application.php, line: 167, function: doRun, class: Symfony\Component\Console\Application, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Console/Application.php, line: 94, function: run, class: Symfony\Component\Console\Application, type: '->' }, { file: /Users/katherine/www/brand_media/vendor/laravel/framework/src/Illuminate/Foundation/Console/Kernel.php, line: 129, function: run, class: Illuminate\Console\Application, type: '->' }, { file: /Users/katherine/www/brand_media/artisan, line: 37, function: handle, class: Illuminate\Foundation\Console\Kernel, type: '->' }], items: { type: object } }
            tags:
                - 'Web News'
            security: []
    '/api/v1/app/news/{uri}':
        get:
            summary: 'Get specified News'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                404:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    status: error
                                    message: 'Ресурс не знайден.'
                                properties:
                                    status: { type: string, example: error }
                                    message: { type: string, example: 'Ресурс не знайден.' }
            tags:
                - 'Web News'
            security: []
        parameters:
            -
                in: path
                name: uri
                description: ''
                example: ipsa
                required: true
                schema:
                    type: string
    '/api/v1/app/news_stat/{id}':
        post:
            summary: 'Update News'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - 'Web News'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                social:
                                    type: string
                                    description: 'Название социальной сети'
                                    example: consequatur
                            required:
                                - social
        parameters:
            -
                in: path
                name: id
                description: ''
                example: magnam
                required: true
                schema:
                    type: string
    /api/v1/app/weather_cities:
        get:
            summary: 'List of cities'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    type: object
                                example:
                                    - { id: 1, name: 'Кривий Ріг' }
                                    - { id: 2, name: Покровськ }
                                    - { id: 3, name: Маріуполь }
                                    - { id: 4, name: Макіївка }
                                    - { id: 5, name: Запоріжжя }
                                    - { id: 6, name: Авдіївка }
            tags:
                - city
            security: []
    /api/v1/constructor:
        get:
            summary: 'List of News Constructor'
            description: ''
            parameters:
                -
                    in: query
                    name: sort
                    description: 'Поле для сортировки. По-умолчанию  ''id|desc'''
                    example: aut
                    required: false
                    schema:
                        type: string
                        description: 'Поле для сортировки. По-умолчанию  ''id|desc'''
                        example: aut
                -
                    in: query
                    name: status
                    description: 'Статус отображения (возможные значения visible, hidden)'
                    example: iusto
                    required: false
                    schema:
                        type: string
                        description: 'Статус отображения (возможные значения visible, hidden)'
                        example: iusto
                -
                    in: query
                    name: main
                    description: 'Запрос для получения новостей для конструктора новостей'
                    example: occaecati
                    required: false
                    schema:
                        type: string
                        description: 'Запрос для получения новостей для конструктора новостей'
                        example: occaecati
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                401:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: Unauthenticated.
                                properties:
                                    message: { type: string, example: Unauthenticated. }
            tags:
                - constructor
            security: []
        post:
            summary: 'Update News Constructor'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - constructor
            requestBody:
                required: false
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                pages:
                                    type: string
                                    description: 'optional Массив страниц с массивом новостей'
                                    example: sit
    /api/v1/app/currency:
        get:
            summary: 'List of currency'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    type: object
                                example:
                                    - { id: 1, name: USD, sale: '26.40000', purchase: '26.00000', created_at: '2021-11-09 09:14:24' }
                                    - { id: 2, name: EUR, sale: '30.50000', purchase: '29.90000', created_at: '2021-11-09 09:14:24' }
                                    - { id: 3, name: RUR, sale: '0.38000', purchase: '0.35000', created_at: '2021-11-09 09:14:24' }
                                    - { id: 4, name: BTC, sale: '71408.3203', purchase: '64607.5279', created_at: '2021-11-09 09:14:24' }
            tags:
                - currency
            security: []
    /api/v1/app/horoscope:
        get:
            summary: 'Get specified horoscope'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                404:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    status: error
                                    message: 'Ресурс не знайден.'
                                properties:
                                    status: { type: string, example: error }
                                    message: { type: string, example: 'Ресурс не знайден.' }
            tags:
                - horoscopes
            security: []
    /api/v1/inset_contents:
        get:
            summary: 'List of inset_contents'
            description: ''
            parameters:
                -
                    in: query
                    name: page
                    description: 'Номер страницы с результатами выдачи'
                    example: 6
                    required: false
                    schema:
                        type: integer
                        description: 'Номер страницы с результатами выдачи'
                        example: 6
                -
                    in: query
                    name: sort
                    description: 'Поле для сортировки. По-умолчанию  ''id|desc'''
                    example: reprehenderit
                    required: false
                    schema:
                        type: string
                        description: 'Поле для сортировки. По-умолчанию  ''id|desc'''
                        example: reprehenderit
                -
                    in: query
                    name: search
                    description: 'Строка, которая должна содержаться в результатах выдачи'
                    example: accusamus
                    required: false
                    schema:
                        type: string
                        description: 'Строка, которая должна содержаться в результатах выдачи'
                        example: accusamus
                -
                    in: query
                    name: status
                    description: 'Статус отображения (возможные значения visible, hidden)'
                    example: quae
                    required: false
                    schema:
                        type: string
                        description: 'Статус отображения (возможные значения visible, hidden)'
                        example: quae
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                401:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: Unauthenticated.
                                properties:
                                    message: { type: string, example: Unauthenticated. }
            tags:
                - inset_contents
            security: []
    '/api/v1/inset_content/{id}':
        get:
            summary: 'Get specified inset_contents'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                401:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: Unauthenticated.
                                properties:
                                    message: { type: string, example: Unauthenticated. }
            tags:
                - inset_contents
            security: []
        put:
            summary: 'Update inset_contents'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - inset_contents
            requestBody:
                required: false
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    description: 'optional Имя автора в инфо-блоке'
                                    example: officia
                                text:
                                    type: string
                                    description: 'optional Массив с текстом для инфо-блока (возможные ключи: quote, joke)'
                                    example: eos
                                video_code:
                                    type: string
                                    description: 'optional Код Youtube видео'
                                    example: suscipit
        delete:
            summary: 'Delete specified inset_contents'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - inset_contents
        parameters:
            -
                in: path
                name: id
                description: ''
                example: veniam
                required: true
                schema:
                    type: string
    /api/v1/inset_content:
        post:
            summary: 'Create inset_contents'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - inset_contents
            requestBody:
                required: false
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    description: 'optional Имя автора в инфо-блоке'
                                    example: officiis
                                text:
                                    type: string
                                    description: 'optional Массив с текстом для инфо-блока (возможные ключи: quote, joke)'
                                    example: ea
                                video_code:
                                    type: string
                                    description: 'optional Код Youtube видео'
                                    example: illo
    /api/v1/joke_imports:
        get:
            summary: 'List of inset_contents'
            description: ''
            parameters:
                -
                    in: query
                    name: page
                    description: 'Номер страницы с результатами выдачи'
                    example: 13
                    required: false
                    schema:
                        type: integer
                        description: 'Номер страницы с результатами выдачи'
                        example: 13
                -
                    in: query
                    name: search
                    description: 'Строка, которая должна содержаться в результатах выдачи'
                    example: quia
                    required: false
                    schema:
                        type: string
                        description: 'Строка, которая должна содержаться в результатах выдачи'
                        example: quia
                -
                    in: query
                    name: sort
                    description: 'Поле для сортировки. По-умолчанию  ''id|desc'''
                    example: omnis
                    required: false
                    schema:
                        type: string
                        description: 'Поле для сортировки. По-умолчанию  ''id|desc'''
                        example: omnis
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                401:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: Unauthenticated.
                                properties:
                                    message: { type: string, example: Unauthenticated. }
            tags:
                - inset_contents
            security: []
    '/api/v1/joke_import/{id}':
        put:
            summary: 'Update inset_contents'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - inset_contents
            requestBody:
                required: false
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    description: 'optional Имя автора в инфо-блоке'
                                    example: quis
                                text:
                                    type: string
                                    description: 'optional Массив с текстом для инфо-блока (возможные ключи: quote, joke)'
                                    example: sed
                                video_code:
                                    type: string
                                    description: 'optional Код Youtube видео'
                                    example: laborum
        delete:
            summary: 'Delete specified inset_contents'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - inset_contents
        parameters:
            -
                in: path
                name: id
                description: ''
                example: illo
                required: true
                schema:
                    type: string
    /api/v1/quote_imports:
        get:
            summary: 'List of inset_contents'
            description: ''
            parameters:
                -
                    in: query
                    name: page
                    description: 'Номер страницы с результатами выдачи'
                    example: 15
                    required: false
                    schema:
                        type: integer
                        description: 'Номер страницы с результатами выдачи'
                        example: 15
                -
                    in: query
                    name: search
                    description: 'Строка, которая должна содержаться в результатах выдачи'
                    example: saepe
                    required: false
                    schema:
                        type: string
                        description: 'Строка, которая должна содержаться в результатах выдачи'
                        example: saepe
                -
                    in: query
                    name: sort
                    description: 'Поле для сортировки. По-умолчанию  ''id|desc'''
                    example: rerum
                    required: false
                    schema:
                        type: string
                        description: 'Поле для сортировки. По-умолчанию  ''id|desc'''
                        example: rerum
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                401:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: Unauthenticated.
                                properties:
                                    message: { type: string, example: Unauthenticated. }
            tags:
                - inset_contents
            security: []
    '/api/v1/quote_import/{id}':
        put:
            summary: 'Update inset_contents'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - inset_contents
            requestBody:
                required: false
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    description: 'optional Имя автора в инфо-блоке'
                                    example: quidem
                                text:
                                    type: string
                                    description: 'optional Массив с текстом для инфо-блока (возможные ключи: quote, joke)'
                                    example: id
                                video_code:
                                    type: string
                                    description: 'optional Код Youtube видео'
                                    example: dolor
        delete:
            summary: 'Delete specified inset_contents'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - inset_contents
        parameters:
            -
                in: path
                name: id
                description: ''
                example: est
                required: true
                schema:
                    type: string
    /api/v1/insets_stats:
        get:
            summary: 'List of inset_stats'
            description: ''
            parameters:
                -
                    in: query
                    name: page
                    description: 'Номер страницы с результатами выдачи'
                    example: 18
                    required: false
                    schema:
                        type: integer
                        description: 'Номер страницы с результатами выдачи'
                        example: 18
                -
                    in: query
                    name: sort
                    description: 'Поле для сортировки. По-умолчанию  ''id|desc'''
                    example: eaque
                    required: false
                    schema:
                        type: string
                        description: 'Поле для сортировки. По-умолчанию  ''id|desc'''
                        example: eaque
                -
                    in: query
                    name: search
                    description: 'Строка, которая должна содержаться в результатах выдачи'
                    example: et
                    required: false
                    schema:
                        type: string
                        description: 'Строка, которая должна содержаться в результатах выдачи'
                        example: et
                -
                    in: query
                    name: type
                    description: 'Тип инфо-блока (horoscope, joke, quote)'
                    example: fugiat
                    required: false
                    schema:
                        type: string
                        description: 'Тип инфо-блока (horoscope, joke, quote)'
                        example: fugiat
                -
                    in: query
                    name: social
                    description: 'Социальная сеть (facebook, telegram)'
                    example: est
                    required: false
                    schema:
                        type: string
                        description: 'Социальная сеть (facebook, telegram)'
                        example: est
                -
                    in: query
                    name: from
                    description: 'Начало периода в формате ''YYYY-mm-dd HH:ii:ss'''
                    example: rerum
                    required: false
                    schema:
                        type: string
                        description: 'Начало периода в формате ''YYYY-mm-dd HH:ii:ss'''
                        example: rerum
                -
                    in: query
                    name: till
                    description: 'Окончание периода в формате ''YYYY-mm-dd HH:ii:ss'''
                    example: atque
                    required: false
                    schema:
                        type: string
                        description: 'Окончание периода в формате ''YYYY-mm-dd HH:ii:ss'''
                        example: atque
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                401:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: Unauthenticated.
                                properties:
                                    message: { type: string, example: Unauthenticated. }
            tags:
                - inset_stats
            security: []
    /api/v1/insets_charts:
        get:
            summary: 'List of data for charts'
            description: ''
            parameters:
                -
                    in: query
                    name: type
                    description: 'Тип инфо-блока (horoscope, joke, quote)'
                    example: autem
                    required: false
                    schema:
                        type: string
                        description: 'Тип инфо-блока (horoscope, joke, quote)'
                        example: autem
                -
                    in: query
                    name: social
                    description: 'Социальная сеть (facebook, telegram)'
                    example: possimus
                    required: false
                    schema:
                        type: string
                        description: 'Социальная сеть (facebook, telegram)'
                        example: possimus
                -
                    in: query
                    name: from
                    description: 'Начало периода в формате ''YYYY-mm-dd HH:ii:ss'''
                    example: cumque
                    required: false
                    schema:
                        type: string
                        description: 'Начало периода в формате ''YYYY-mm-dd HH:ii:ss'''
                        example: cumque
                -
                    in: query
                    name: till
                    description: 'Окончание периода в формате ''YYYY-mm-dd HH:ii:ss'''
                    example: excepturi
                    required: false
                    schema:
                        type: string
                        description: 'Окончание периода в формате ''YYYY-mm-dd HH:ii:ss'''
                        example: excepturi
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                401:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: Unauthenticated.
                                properties:
                                    message: { type: string, example: Unauthenticated. }
            tags:
                - inset_stats
            security: []
    /api/v1/app/inset_stat:
        post:
            summary: 'Update inset_stats'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - inset_stats
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                type:
                                    type: string
                                    description: 'Тип инфо-блока (joke, quote, horoscope)'
                                    example: esse
                                social:
                                    type: string
                                    description: 'Социальная сеть (facebook, telegram)'
                                    example: fugit
                                inset_id:
                                    type: integer
                                    description: 'ID инфо-блока'
                                    example: 10
                            required:
                                - type
    /api/v1/insets:
        get:
            summary: 'List of insets'
            description: ''
            parameters:
                -
                    in: query
                    name: page
                    description: 'Номер страницы с результатами выдачи'
                    example: 2
                    required: false
                    schema:
                        type: integer
                        description: 'Номер страницы с результатами выдачи'
                        example: 2
                -
                    in: query
                    name: sort
                    description: 'Поле для сортировки. По-умолчанию  ''id|desc'''
                    example: distinctio
                    required: false
                    schema:
                        type: string
                        description: 'Поле для сортировки. По-умолчанию  ''id|desc'''
                        example: distinctio
                -
                    in: query
                    name: search
                    description: 'Строка, которая должна содержаться в результатах выдачи'
                    example: similique
                    required: false
                    schema:
                        type: string
                        description: 'Строка, которая должна содержаться в результатах выдачи'
                        example: similique
                -
                    in: query
                    name: status
                    description: 'Статус отображения (возможные значения visible, hidden)'
                    example: ipsam
                    required: false
                    schema:
                        type: string
                        description: 'Статус отображения (возможные значения visible, hidden)'
                        example: ipsam
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                401:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: Unauthenticated.
                                properties:
                                    message: { type: string, example: Unauthenticated. }
            tags:
                - insets
            security: []
    '/api/v1/inset/{id}':
        get:
            summary: 'Get specified insets'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                401:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: Unauthenticated.
                                properties:
                                    message: { type: string, example: Unauthenticated. }
            tags:
                - insets
            security: []
        put:
            summary: 'Update insets'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - insets
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                position:
                                    type: integer
                                    description: 'Позиция в списке разделителей'
                                    example: 13
                                type:
                                    type: string
                                    description: 'Тип разделителя (custom, random, videos, categories)'
                                    example: quia
                                data:
                                    type: string
                                    description: 'optional Массив данных для некоторых типов разделителя (ключи: category_id, left_id, right_id)'
                                    example: ut
                                status:
                                    type: integer
                                    description: 'Статус отображения (1-отображается, 0-скрыто)'
                                    example: 9
                            required:
                                - position
                                - type
        delete:
            summary: 'Delete specified insets'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - insets
        parameters:
            -
                in: path
                name: id
                description: ''
                example: nemo
                required: true
                schema:
                    type: string
    /api/v1/inset:
        post:
            summary: 'Create insets'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - insets
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                position:
                                    type: integer
                                    description: 'Позиция в списке разделителей'
                                    example: 13
                                type:
                                    type: string
                                    description: 'Тип разделителя (custom, random, videos, categories)'
                                    example: ipsa
                                data:
                                    type: string
                                    description: 'optional Массив данных для некоторых типов разделителя (ключи: category_id, left_id, right_id)'
                                    example: facilis
                                status:
                                    type: integer
                                    description: 'Статус отображения (1-отображается, 0-скрыто)'
                                    example: 18
                            required:
                                - position
                                - type
    /api/v1/app/insets:
        get:
            summary: 'List of insets'
            description: ''
            parameters:
                -
                    in: query
                    name: page
                    description: 'Номер страницы с результатами выдачи'
                    example: 13
                    required: false
                    schema:
                        type: integer
                        description: 'Номер страницы с результатами выдачи'
                        example: 13
                -
                    in: query
                    name: sort
                    description: 'Поле для сортировки. По-умолчанию  ''id|desc'''
                    example: iure
                    required: false
                    schema:
                        type: string
                        description: 'Поле для сортировки. По-умолчанию  ''id|desc'''
                        example: iure
                -
                    in: query
                    name: search
                    description: 'Строка, которая должна содержаться в результатах выдачи'
                    example: ipsam
                    required: false
                    schema:
                        type: string
                        description: 'Строка, которая должна содержаться в результатах выдачи'
                        example: ipsam
                -
                    in: query
                    name: status
                    description: 'Статус отображения (возможные значения visible, hidden)'
                    example: autem
                    required: false
                    schema:
                        type: string
                        description: 'Статус отображения (возможные значения visible, hidden)'
                        example: autem
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    current_page: 13
                                    data: []
                                    first_page_url: 'http://localhost/api/v1/app/insets?page=1'
                                    from: null
                                    last_page: 10
                                    last_page_url: 'http://localhost/api/v1/app/insets?page=10'
                                    links: [{ url: 'http://localhost/api/v1/app/insets?page=12', label: '&laquo; Назад', active: false }, { url: 'http://localhost/api/v1/app/insets?page=1', label: '1', active: false }, { url: 'http://localhost/api/v1/app/insets?page=2', label: '2', active: false }, { url: 'http://localhost/api/v1/app/insets?page=3', label: '3', active: false }, { url: 'http://localhost/api/v1/app/insets?page=4', label: '4', active: false }, { url: 'http://localhost/api/v1/app/insets?page=5', label: '5', active: false }, { url: 'http://localhost/api/v1/app/insets?page=6', label: '6', active: false }, { url: 'http://localhost/api/v1/app/insets?page=7', label: '7', active: false }, { url: 'http://localhost/api/v1/app/insets?page=8', label: '8', active: false }, { url: 'http://localhost/api/v1/app/insets?page=9', label: '9', active: false }, { url: 'http://localhost/api/v1/app/insets?page=10', label: '10', active: false }, { url: null, label: 'Вперёд &raquo;', active: false }]
                                    next_page_url: null
                                    path: 'http://localhost/api/v1/app/insets'
                                    per_page: 1
                                    prev_page_url: 'http://localhost/api/v1/app/insets?page=12'
                                    to: null
                                    total: 10
                                properties:
                                    current_page: { type: integer, example: 13 }
                                    data: { type: array, example: [] }
                                    first_page_url: { type: string, example: 'http://localhost/api/v1/app/insets?page=1' }
                                    from: { type: string, example: null }
                                    last_page: { type: integer, example: 10 }
                                    last_page_url: { type: string, example: 'http://localhost/api/v1/app/insets?page=10' }
                                    links: { type: array, example: [{ url: 'http://localhost/api/v1/app/insets?page=12', label: '&laquo; Назад', active: false }, { url: 'http://localhost/api/v1/app/insets?page=1', label: '1', active: false }, { url: 'http://localhost/api/v1/app/insets?page=2', label: '2', active: false }, { url: 'http://localhost/api/v1/app/insets?page=3', label: '3', active: false }, { url: 'http://localhost/api/v1/app/insets?page=4', label: '4', active: false }, { url: 'http://localhost/api/v1/app/insets?page=5', label: '5', active: false }, { url: 'http://localhost/api/v1/app/insets?page=6', label: '6', active: false }, { url: 'http://localhost/api/v1/app/insets?page=7', label: '7', active: false }, { url: 'http://localhost/api/v1/app/insets?page=8', label: '8', active: false }, { url: 'http://localhost/api/v1/app/insets?page=9', label: '9', active: false }, { url: 'http://localhost/api/v1/app/insets?page=10', label: '10', active: false }, { url: null, label: 'Вперёд &raquo;', active: false }], items: { type: object } }
                                    next_page_url: { type: string, example: null }
                                    path: { type: string, example: 'http://localhost/api/v1/app/insets' }
                                    per_page: { type: integer, example: 1 }
                                    prev_page_url: { type: string, example: 'http://localhost/api/v1/app/insets?page=12' }
                                    to: { type: string, example: null }
                                    total: { type: integer, example: 10 }
            tags:
                - insets
            security: []
    /api/v1/app/insets/image:
        post:
            summary: 'Image Upload'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - insets
            requestBody:
                required: false
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                image:
                                    type: required
                                    description: 'Файл картинки'
                                    example: repudiandae
            security: []
    /api/v1/news_stats:
        get:
            summary: 'List of news_stats'
            description: ''
            parameters:
                -
                    in: query
                    name: page
                    description: 'Номер страницы с результатами выдачи'
                    example: 2
                    required: false
                    schema:
                        type: integer
                        description: 'Номер страницы с результатами выдачи'
                        example: 2
                -
                    in: query
                    name: sort
                    description: 'Поле для сортировки. По-умолчанию  ''id|desc'''
                    example: praesentium
                    required: false
                    schema:
                        type: string
                        description: 'Поле для сортировки. По-умолчанию  ''id|desc'''
                        example: praesentium
                -
                    in: query
                    name: search
                    description: 'Строка, которая должна содержаться в результатах выдачи'
                    example: accusantium
                    required: false
                    schema:
                        type: string
                        description: 'Строка, которая должна содержаться в результатах выдачи'
                        example: accusantium
                -
                    in: query
                    name: type
                    description: 'Тип инфо-блока (horoscope, joke, quote)'
                    example: dolorum
                    required: false
                    schema:
                        type: string
                        description: 'Тип инфо-блока (horoscope, joke, quote)'
                        example: dolorum
                -
                    in: query
                    name: social
                    description: 'Социальная сеть (facebook, telegram)'
                    example: in
                    required: false
                    schema:
                        type: string
                        description: 'Социальная сеть (facebook, telegram)'
                        example: in
                -
                    in: query
                    name: from
                    description: 'Начало периода в формате ''YYYY-mm-dd HH:ii:ss'''
                    example: voluptatem
                    required: false
                    schema:
                        type: string
                        description: 'Начало периода в формате ''YYYY-mm-dd HH:ii:ss'''
                        example: voluptatem
                -
                    in: query
                    name: till
                    description: 'Окончание периода в формате ''YYYY-mm-dd HH:ii:ss'''
                    example: autem
                    required: false
                    schema:
                        type: string
                        description: 'Окончание периода в формате ''YYYY-mm-dd HH:ii:ss'''
                        example: autem
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                401:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: Unauthenticated.
                                properties:
                                    message: { type: string, example: Unauthenticated. }
            tags:
                - news_stats
            security: []
    /api/v1/news_charts:
        get:
            summary: 'List of data for charts'
            description: ''
            parameters:
                -
                    in: query
                    name: type
                    description: 'Тип инфо-блока (horoscope, joke, quote)'
                    example: cupiditate
                    required: false
                    schema:
                        type: string
                        description: 'Тип инфо-блока (horoscope, joke, quote)'
                        example: cupiditate
                -
                    in: query
                    name: social
                    description: 'Социальная сеть (facebook, telegram)'
                    example: quaerat
                    required: false
                    schema:
                        type: string
                        description: 'Социальная сеть (facebook, telegram)'
                        example: quaerat
                -
                    in: query
                    name: from
                    description: 'Начало периода в формате ''YYYY-mm-dd HH:ii:ss'''
                    example: qui
                    required: false
                    schema:
                        type: string
                        description: 'Начало периода в формате ''YYYY-mm-dd HH:ii:ss'''
                        example: qui
                -
                    in: query
                    name: till
                    description: 'Окончание периода в формате ''YYYY-mm-dd HH:ii:ss'''
                    example: omnis
                    required: false
                    schema:
                        type: string
                        description: 'Окончание периода в формате ''YYYY-mm-dd HH:ii:ss'''
                        example: omnis
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                401:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: Unauthenticated.
                                properties:
                                    message: { type: string, example: Unauthenticated. }
            tags:
                - news_stats
            security: []
    /api/v1/app/horoscope_signs:
        get:
            summary: 'List of horoscope signs'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    type: object
                                example:
                                    - { id: 1, name: Овен, slug: aries }
                                    - { id: 2, name: Телец, slug: taurus }
                                    - { id: 3, name: Близнецы, slug: gemini }
                                    - { id: 4, name: Рак, slug: cancer }
                                    - { id: 5, name: Лев, slug: leo }
                                    - { id: 6, name: Дева, slug: virgo }
                                    - { id: 7, name: Весы, slug: libra }
                                    - { id: 8, name: Скорпион, slug: scorpio }
                                    - { id: 9, name: Стрелец, slug: sagittarius }
                                    - { id: 10, name: Козерог, slug: capricorn }
                                    - { id: 11, name: Водолей, slug: aquarius }
                                    - { id: 12, name: Рыбы, slug: pisces }
            tags:
                - sign
            security: []
    /api/v1/app/weather:
        get:
            summary: 'List of weathers'
            description: ''
            parameters:
                -
                    in: query
                    name: city_id
                    description: 'ID города'
                    example: 7
                    required: false
                    schema:
                        type: integer
                        description: 'ID города'
                        example: 7
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    type: object
                                example: []
            tags:
                - weather
            security: []
